<?php
//Stubs generated by `../stub-generators/cmb2.sh`.

/**
 * CMB2 Base - Base object functionality.
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @property-read array      $args        The objects array of properties/arguments.
 * @property-read array      $meta_box    The objects array of properties/arguments.
 * @property-read array      $properties  The objects array of properties/arguments.
 * @property-read string     $cmb_id      Current CMB2 instance ID
 * @property-read string|int $object_id   Object ID
 * @property-read string     $object_type Type of object being handled. (e.g., post, user, comment, or term)
 */
abstract class CMB2_Base
{
    /**
     * Current CMB2 instance ID
     *
     * @var   string
     * @since 2.2.3
     */
    protected $cmb_id = '';
    /**
     * The object properties name.
     *
     * @var   string
     * @since 2.2.3
     */
    protected $properties_name = 'meta_box';
    /**
     * Object ID
     *
     * @var   mixed
     * @since 2.2.3
     */
    protected $object_id = 0;
    /**
     * Type of object being handled. (e.g., post, user, comment, or term)
     *
     * @var   string
     * @since 2.2.3
     */
    protected $object_type = '';
    /**
     * Array of key => value data for saving. Likely $_POST data.
     *
     * @var   array
     * @since 2.2.3
     */
    public $data_to_save = array();
    /**
     * Array of field param callback results
     *
     * @var   array
     * @since 2.0.0
     */
    protected $callback_results = array();
    /**
     * The deprecated_param method deprecated param message signature.
     */
    const DEPRECATED_PARAM = 1;
    /**
     * The deprecated_param method deprecated callback param message signature.
     */
    const DEPRECATED_CB_PARAM = 2;
    /**
     * Get started
     *
     * @since 2.2.3
     * @param array $args Object properties array.
     */
    public function __construct($args = array())
    {
    }
    /**
     * Returns the object ID
     *
     * @since  2.2.3
     * @param  integer $object_id Object ID.
     * @return integer Object ID
     */
    public function object_id($object_id = 0)
    {
    }
    /**
     * Returns the object type
     *
     * @since  2.2.3
     * @param  string $object_type Object Type.
     * @return string Object type
     */
    public function object_type($object_type = '')
    {
    }
    /**
     * Get the object type for the current page, based on the $pagenow global.
     *
     * @since  2.2.2
     * @return string  Page object type name.
     */
    public function current_object_type()
    {
    }
    /**
     * Set object property.
     *
     * @since  2.2.2
     * @param  string $property Metabox config property to retrieve.
     * @param  mixed  $value    Value to set if no value found.
     * @return mixed            Metabox config property value or false.
     */
    public function set_prop($property, $value)
    {
    }
    /**
     * Get object property and optionally set a fallback
     *
     * @since  2.0.0
     * @param  string $property Metabox config property to retrieve.
     * @param  mixed  $fallback Fallback value to set if no value found.
     * @return mixed            Metabox config property value or false
     */
    public function prop($property, $fallback = \null)
    {
    }
    /**
     * Get default field arguments specific to this CMB2 object.
     *
     * @since  2.2.0
     * @param  array      $field_args  Metabox field config array.
     * @param  CMB2_Field $field_group (optional) CMB2_Field object (group parent).
     * @return array                   Array of field arguments.
     */
    protected function get_default_args($field_args, $field_group = \null)
    {
    }
    /**
     * Get a new field object specific to this CMB2 object.
     *
     * @since  2.2.0
     * @param  array      $field_args  Metabox field config array.
     * @param  CMB2_Field $field_group (optional) CMB2_Field object (group parent).
     * @return CMB2_Field CMB2_Field object
     */
    protected function get_new_field($field_args, $field_group = \null)
    {
    }
    /**
     * Determine whether this cmb object should show, based on the 'show_on_cb' callback.
     *
     * @since 2.0.9
     *
     * @return bool Whether this cmb should be shown.
     */
    public function should_show()
    {
    }
    /**
     * Displays the results of the param callbacks.
     *
     * @since 2.0.0
     * @param string $param Field parameter.
     */
    public function peform_param_callback($param)
    {
    }
    /**
     * Store results of the param callbacks for continual access
     *
     * @since  2.0.0
     * @param  string $param Field parameter.
     * @return mixed         Results of param/param callback
     */
    public function get_param_callback_result($param)
    {
    }
    /**
     * Unset the cached results of the param callback.
     *
     * @since  2.2.6
     * @param  string $param Field parameter.
     * @return CMB2_Base
     */
    public function unset_param_callback_cache($param)
    {
    }
    /**
     * Handles the parameter callbacks, and passes this object as parameter.
     *
     * @since  2.2.3
     * @param  callable $cb                The callback method/function/closure.
     * @param  mixed    $additional_params Any additoinal parameters which should be passed to the callback.
     * @return mixed                       Return of the callback function.
     */
    protected function do_callback($cb, $additional_params = \null)
    {
    }
    /**
     * Checks if field has a callback value
     *
     * @since  1.0.1
     * @param  string $cb Callback string.
     * @return mixed      NULL, false for NO validation, or $cb string if it exists.
     */
    public function maybe_callback($cb)
    {
    }
    /**
     * Checks if this object has parameter corresponding to the given filter
     * which is callable. If so, it registers the callback, and if not,
     * converts the maybe-modified $val to a boolean for return.
     *
     * The registered handlers will have a parameter name which matches the filter, except:
     * - The 'cmb2_api' prefix will be removed
     * - A '_cb' suffix will be added (to stay inline with other '*_cb' parameters).
     *
     * @since  2.2.3
     *
     * @param  string $hook_name     The hook name.
     * @param  bool   $val           The default value.
     * @param  string $hook_function The hook function. Default: 'add_filter'.
     *
     * @return null|bool             Null if hook is registered, or bool for value.
     */
    public function maybe_hook_parameter($hook_name, $val = \null, $hook_function = 'add_filter')
    {
    }
    /**
     * Checks if given value is callable, and registers the callback.
     * If is non-callable, converts the $val to a boolean for return.
     *
     * @since  2.2.3
     *
     * @param  bool   $val           The default value.
     * @param  string $hook_name     The hook name.
     * @param  string $hook_function The hook function.
     *
     * @return null|bool         Null if hook is registered, or bool for value.
     */
    public static function maybe_hook($val, $hook_name, $hook_function)
    {
    }
    /**
     * Mark a param as deprecated and inform when it has been used.
     *
     * There is a default WordPress hook deprecated_argument_run that will be called
     * that can be used to get the backtrace up to what file and function used the
     * deprecated argument.
     *
     * The current behavior is to trigger a user error if WP_DEBUG is true.
     *
     * @since 2.2.3
     *
     * @param string $function The function that was called.
     * @param string $version  The version of CMB2 that deprecated the argument used.
     * @param string $message  Optional. A message regarding the change, or numeric
     *                         key to generate message from additional arguments.
     *                         Default null.
     */
    protected function deprecated_param($function, $version, $message = \null)
    {
    }
    /**
     * Magic getter for our object.
     *
     * @param string $field Requested property.
     * @throws Exception Throws an exception if the field is invalid.
     * @return mixed
     */
    public function __get($field)
    {
    }
    /**
     * Allows overloading the object with methods... Whooaaa oooh it's magic, y'knoooow.
     *
     * @since 1.0.0
     * @throws Exception Invalid method exception.
     *
     * @param string $method Non-existent method.
     * @param array  $args   All arguments passed to the method.
     * @return mixed
     */
    public function __call($method, $args)
    {
    }
}
/**
 * CMB2 - The core metabox object
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @property-read string $cmb_id
 * @property-read array $meta_box
 * @property-read array $updated
 * @property-read bool  $has_columns
 * @property-read array $tax_metaboxes_to_remove
 */
/**
 * The main CMB2 object for storing box data/properties.
 */
class CMB2 extends \CMB2_Base
{
    /**
     * The object properties name.
     *
     * @var   string
     * @since 2.2.3
     */
    protected $properties_name = 'meta_box';
    /**
     * Metabox Config array
     *
     * @var   array
     * @since 0.9.0
     */
    protected $meta_box = array();
    /**
     * Type of object registered for metabox. (e.g., post, user, or comment)
     *
     * @var   string
     * @since 1.0.0
     */
    protected $mb_object_type = \null;
    /**
     * List of fields that are changed/updated on save
     *
     * @var   array
     * @since 1.1.0
     */
    protected $updated = array();
    /**
     * Metabox Defaults
     *
     * @var   array
     * @since 1.0.1
     */
    protected $mb_defaults = array(
        'id' => '',
        'title' => '',
        // Post type slug, or 'user', 'term', 'comment', or 'options-page'.
        'object_types' => array(),
        /**
         * The context within the screen where the boxes should display. Available contexts vary
         * from screen to screen. Post edit screen contexts include 'normal', 'side', and 'advanced'.
         *
         * For placement in locations outside of a metabox, other options include:
         * 'form_top', 'before_permalink', 'after_title', 'after_editor'
         *
         * Comments screen contexts include 'normal' and 'side'. Default is 'normal'.
         */
        'context' => 'normal',
        'priority' => 'high',
        // Or 10 for options pages.
        'show_names' => \true,
        // Show field names on the left.
        'show_on_cb' => \null,
        // Callback to determine if metabox should display.
        'show_on' => array(),
        // Post IDs or page templates to display this metabox. overrides 'show_on_cb'.
        'cmb_styles' => \true,
        // Include CMB2 stylesheet.
        'enqueue_js' => \true,
        // Include CMB2 JS.
        'fields' => array(),
        /**
         * Handles hooking CMB2 forms/metaboxes into the post/attachement/user/options-page screens
         * and handles hooking in and saving those fields.
         */
        'hookup' => \true,
        'save_fields' => \true,
        // Will not save during hookup if false.
        'closed' => \false,
        // Default metabox to being closed.
        'taxonomies' => array(),
        'new_user_section' => 'add-new-user',
        // or 'add-existing-user'.
        'new_term_section' => \true,
        'show_in_rest' => \false,
        'classes' => \null,
        // Optionally add classes to the CMB2 wrapper.
        'classes_cb' => '',
        // Optionally add classes to the CMB2 wrapper (via a callback).
        /*
         * The following parameter is for post alternate-context metaboxes only.
         *
         * To output the fields 'naked' (without a postbox wrapper/style), then
         * add a `'remove_box_wrap' => true` to your metabox registration array.
         */
        'remove_box_wrap' => \false,
        /*
         * The following parameter is any additional arguments passed as $callback_args
         * to add_meta_box, if/when applicable.
         *
         * CMB2 does not use these arguments in the add_meta_box callback, however, these args
         * are parsed for certain special properties, like determining Gutenberg/block-editor
         * compatibility.
         *
         * Examples:
         *
         * - Make sure default editor is used as metabox is not compatible with block editor
         *      [ '__block_editor_compatible_meta_box' => false/true ]
         *
         * - Or declare this box exists for backwards compatibility
         *      [ '__back_compat_meta_box' => false ]
         *
         * More: https://wordpress.org/gutenberg/handbook/extensibility/meta-box/
         */
        'mb_callback_args' => \null,
        /*
         * The following parameters are for options-page metaboxes,
         * and several are passed along to add_menu_page()/add_submenu_page()
         */
        // 'menu_title'           => null, // Falls back to 'title' (above). Do not define here so we can set a fallback.
        'message_cb' => '',
        // Optionally define the options-save message (via a callback).
        'option_key' => '',
        // The actual option key and admin menu page slug.
        'parent_slug' => '',
        // Used as first param in add_submenu_page().
        'capability' => 'manage_options',
        // Cap required to view options-page.
        'icon_url' => '',
        // Menu icon. Only applicable if 'parent_slug' is left empty.
        'position' => \null,
        // Menu position. Only applicable if 'parent_slug' is left empty.
        'admin_menu_hook' => 'admin_menu',
        // Alternately 'network_admin_menu' to add network-level options page.
        'display_cb' => \false,
        // Override the options-page form output (CMB2_Hookup::options_page_output()).
        'save_button' => '',
        // The text for the options-page save button. Defaults to 'Save'.
        'disable_settings_errors' => \false,
        // On settings pages (not options-general.php sub-pages), allows disabling.
        'tab_group' => '',
    );
    /**
     * Metabox field objects
     *
     * @var   array
     * @since 2.0.3
     */
    protected $fields = array();
    /**
     * An array of hidden fields to output at the end of the form
     *
     * @var   array
     * @since 2.0.0
     */
    protected $hidden_fields = array();
    /**
     * Array of key => value data for saving. Likely $_POST data.
     *
     * @var   string
     * @since 2.0.0
     */
    protected $generated_nonce = '';
    /**
     * Whether there are fields to be shown in columns. Set in CMB2::add_field().
     *
     * @var   bool
     * @since 2.2.2
     */
    protected $has_columns = \false;
    /**
     * If taxonomy field is requesting to remove_default, we store the taxonomy here.
     *
     * @var   array
     * @since 2.2.3
     */
    protected $tax_metaboxes_to_remove = array();
    /**
     * Get started
     *
     * @since 0.4.0
     * @param array   $config    Metabox config array.
     * @param integer $object_id Optional object id.
     */
    public function __construct($config, $object_id = 0)
    {
    }
    /**
     * Loops through and displays fields
     *
     * @since 1.0.0
     * @param int    $object_id   Object ID.
     * @param string $object_type Type of object being saved. (e.g., post, user, or comment).
     *
     * @return CMB2
     */
    public function show_form($object_id = 0, $object_type = '')
    {
    }
    /**
     * Outputs the opening form markup and runs corresponding hooks:
     * 'cmb2_before_form' and "cmb2_before_{$object_type}_form_{$this->cmb_id}"
     *
     * @since  2.2.0
     * @param  integer $object_id   Object ID.
     * @param  string  $object_type Object type.
     *
     * @return CMB2
     */
    public function render_form_open($object_id = 0, $object_type = '')
    {
    }
    /**
     * Defines the classes for the CMB2 form/wrap.
     *
     * @since  2.0.0
     * @return string Space concatenated list of classes
     */
    public function box_classes()
    {
    }
    /**
     * Outputs the closing form markup and runs corresponding hooks:
     * 'cmb2_after_form' and "cmb2_after_{$object_type}_form_{$this->cmb_id}"
     *
     * @since  2.2.0
     * @param  integer $object_id   Object ID.
     * @param  string  $object_type Object type.
     *
     * @return CMB2
     */
    public function render_form_close($object_id = 0, $object_type = '')
    {
    }
    /**
     * Renders a field based on the field type
     *
     * @since  2.2.0
     * @param  array $field_args A field configuration array.
     * @return mixed CMB2_Field object if successful.
     */
    public function render_field($field_args)
    {
    }
    /**
     * Render a group of fields.
     *
     * @param array|CMB2_Field $args Array of field arguments for a group field parent or the group parent field.
     * @return CMB2_Field|null Group field object.
     */
    public function render_group($args)
    {
    }
    /**
     * The default callback to render a group of fields.
     *
     * @since  2.2.6
     *
     * @param  array      $field_args  Array of field arguments for the group field parent.
     * @param  CMB2_Field $field_group The CMB2_Field group object.
     *
     * @return CMB2_Field|null Group field object.
     */
    public function render_group_callback($field_args, $field_group)
    {
    }
    /**
     * Get the group wrap attributes, which are passed through a filter.
     *
     * @since  2.2.3
     * @param  CMB2_Field $field_group The group CMB2_Field object.
     * @return string                  The attributes string.
     */
    public function group_wrap_attributes($field_group)
    {
    }
    /**
     * Render a repeatable group row
     *
     * @since  1.0.2
     * @param  CMB2_Field $field_group     CMB2_Field group field object.
     *
     * @return CMB2
     */
    public function render_group_row($field_group)
    {
    }
    /**
     * Add a hidden field to the list of hidden fields to be rendered later.
     *
     * @since 2.0.0
     *
     * @param array           $field_args  Array of field arguments to be passed to CMB2_Field.
     * @param CMB2_Field|null $field_group CMB2_Field group field object.
     * @return CMB2_Field
     */
    public function add_hidden_field($field_args, $field_group = \null)
    {
    }
    /**
     * Loop through and output hidden fields
     *
     * @since  2.0.0
     *
     * @return CMB2
     */
    public function render_hidden_fields()
    {
    }
    /**
     * Returns array of sanitized field values (without saving them)
     *
     * @since  2.0.3
     * @param  array $data_to_sanitize Array of field_id => value data for sanitizing (likely $_POST data).
     * @return mixed
     */
    public function get_sanitized_values(array $data_to_sanitize)
    {
    }
    /**
     * Loops through and saves field data
     *
     * @since  1.0.0
     * @param  int    $object_id    Object ID.
     * @param  string $object_type  Type of object being saved. (e.g., post, user, or comment).
     * @param  array  $data_to_save Array of key => value data for saving. Likely $_POST data.
     *
     * @return CMB2
     */
    public function save_fields($object_id = 0, $object_type = '', $data_to_save = array())
    {
    }
    /**
     * Process and save form fields
     *
     * @since  2.0.0
     *
     * @return CMB2
     */
    public function process_fields()
    {
    }
    /**
     * Process and save a field
     *
     * @since  2.0.0
     * @param  array $field_args Array of field arguments.
     *
     * @return CMB2
     */
    public function process_field($field_args)
    {
    }
    /**
     * Fires the "cmb2_{$object_type}_process_fields_{$cmb_id}" action hook.
     *
     * @since 2.2.2
     *
     * @return CMB2
     */
    public function pre_process()
    {
    }
    /**
     * Fires the "cmb2_save_{$object_type}_fields" and
     * "cmb2_save_{$object_type}_fields_{$cmb_id}" action hooks.
     *
     * @since  2.x.x
     *
     * @return CMB2
     */
    public function after_save()
    {
    }
    /**
     * Save a repeatable group
     *
     * @since  1.x.x
     * @param  array $args Field arguments array.
     * @return mixed        Return of CMB2_Field::update_data().
     */
    public function save_group($args)
    {
    }
    /**
     * Save a repeatable group
     *
     * @since  1.x.x
     * @param  CMB2_Field $field_group CMB2_Field group field object.
     * @return mixed                   Return of CMB2_Field::update_data().
     */
    public function save_group_field($field_group)
    {
    }
    /**
     * Get object id from global space if no id is provided
     *
     * @since  1.0.0
     * @param  integer|string $object_id Object ID.
     * @return integer|string $object_id Object ID.
     */
    public function object_id($object_id = 0)
    {
    }
    /**
     * Sets the $object_type based on metabox settings
     *
     * @since  1.0.0
     * @return string Object type.
     */
    public function mb_object_type()
    {
    }
    /**
     * Gets the box 'object_types' array based on box settings.
     *
     * @since  2.2.3
     * @param  array $fallback Fallback value.
     *
     * @return array Object types.
     */
    public function box_types($fallback = array())
    {
    }
    /**
     * Check if given object_type(s) matches any of the registered object types or
     * taxonomies for this box.
     *
     * @since  2.7.0
     * @param  string|array $object_types The object type(s) to check.
     * @param  array        $fallback     Fallback object_types value.
     *
     * @return bool Whether given object type(s) are registered to this box.
     */
    public function is_box_type($object_types = array(), $fallback = array())
    {
    }
    /**
     * Initates the object types and option key for an options page metabox.
     *
     * @since  2.2.5
     *
     * @return void
     */
    public function init_options_mb()
    {
    }
    /**
     * If object-page initiation failed, remove traces options page setup.
     *
     * @since  2.2.5
     *
     * @param array $types Array of types.
     * @return array
     */
    protected function deinit_options_mb($types)
    {
    }
    /**
     * Determines if metabox is for an options page
     *
     * @since  1.0.1
     * @return boolean True/False.
     */
    public function is_options_page_mb()
    {
    }
    /**
     * Determines if metabox uses old-schoold options page config.
     *
     * @since  2.2.5
     * @return boolean True/False.
     */
    public function is_old_school_options_page_mb()
    {
    }
    /**
     * Determine if we are on an options page (or saving the options page).
     *
     * @since  2.2.5
     *
     * @return bool
     */
    public function doing_options_page()
    {
    }
    /**
     * Get the options page key.
     *
     * @since  2.2.5
     * @return string|array
     */
    public function options_page_keys()
    {
    }
    /**
     * Returns the object type
     *
     * @since  1.0.0
     * @param string $object_type Type of object being saved. (e.g., post, user, or comment). Optional.
     * @return string Object type.
     */
    public function object_type($object_type = '')
    {
    }
    /**
     * Get the object type for the current page, based on the $pagenow global.
     *
     * @since  2.2.2
     * @return string  Page object type name.
     */
    public function current_object_type()
    {
    }
    /**
     * Set metabox property.
     *
     * @since  2.2.2
     * @param  string $property Metabox config property to retrieve.
     * @param  mixed  $value    Value to set if no value found.
     * @return mixed            Metabox config property value or false.
     */
    public function set_prop($property, $value)
    {
    }
    /**
     * Get metabox property and optionally set a fallback
     *
     * @since  2.0.0
     * @param  string $property Metabox config property to retrieve.
     * @param  mixed  $fallback Fallback value to set if no value found.
     * @return mixed            Metabox config property value or false.
     */
    public function prop($property, $fallback = \null)
    {
    }
    /**
     * Get a field object
     *
     * @since  2.0.3
     * @param  string|array|CMB2_Field $field        Metabox field id or field config array or CMB2_Field object.
     * @param  CMB2_Field|null         $field_group  (optional) CMB2_Field object (group parent).
     * @param  bool                    $reset_cached (optional) Reset the internal cache for this field object.
     *                                               Use sparingly.
     *
     * @return CMB2_Field|false                     CMB2_Field object (or false).
     */
    public function get_field($field, $field_group = \null, $reset_cached = \false)
    {
    }
    /**
     * Handles determining which type of arguments to pass to CMB2_Field
     *
     * @since  2.0.7
     * @param  mixed           $field_id     Field (or group field) ID.
     * @param  mixed           $field_args   Array of field arguments.
     * @param  mixed           $sub_field_id Sub field ID (if field_group exists).
     * @param  CMB2_Field|null $field_group  If a sub-field, will be the parent group CMB2_Field object.
     * @return array                         Array of CMB2_Field arguments.
     */
    public function get_field_args($field_id, $field_args, $sub_field_id, $field_group)
    {
    }
    /**
     * Get default field arguments specific to this CMB2 object.
     *
     * @since  2.2.0
     * @param  array      $field_args  Metabox field config array.
     * @param  CMB2_Field $field_group (optional) CMB2_Field object (group parent).
     * @return array                   Array of field arguments.
     */
    protected function get_default_args($field_args, $field_group = \null)
    {
    }
    /**
     * When fields are added in the old-school way, intitate them as they should be
     *
     * @since 2.1.0
     * @param array $fields          Array of fields to add.
     * @param mixed $parent_field_id Parent field id or null.
     *
     * @return CMB2
     */
    protected function add_fields($fields, $parent_field_id = \null)
    {
    }
    /**
     * Add a field to the metabox
     *
     * @since  2.0.0
     * @param  array $field    Metabox field config array.
     * @param  int   $position (optional) Position of metabox. 1 for first, etc.
     * @return string|false    Field id or false.
     */
    public function add_field(array $field, $position = 0)
    {
    }
    /**
     * Add a field to a group
     *
     * @since  2.0.0
     * @param  string $parent_field_id The field id of the group field to add the field.
     * @param  array  $field           Metabox field config array.
     * @param  int    $position        (optional) Position of metabox. 1 for first, etc.
     * @return mixed                   Array of parent/field ids or false.
     */
    public function add_group_field($parent_field_id, array $field, $position = 0)
    {
    }
    /**
     * Perform some field-type-specific initiation actions.
     *
     * @since  2.7.0
     * @param  array $field Metabox field config array.
     * @return void
     */
    protected function field_actions($field)
    {
    }
    /**
     * Defines a field's column if requesting to be show in admin columns.
     *
     * @since  2.2.3
     * @param  array $field Metabox field config array.
     * @return array         Modified metabox field config array.
     */
    protected function define_field_column(array $field)
    {
    }
    /**
     * Add a field array to a fields array in desired position
     *
     * @since 2.0.2
     * @param array   $field    Metabox field config array.
     * @param array   $fields   Array (passed by reference) to append the field (array) to.
     * @param integer $position Optionally specify a position in the array to be inserted.
     */
    protected function _add_field_to_array($field, &$fields, $position = 0)
    {
    }
    /**
     * Remove a field from the metabox
     *
     * @since 2.0.0
     * @param  string $field_id        The field id of the field to remove.
     * @param  string $parent_field_id (optional) The field id of the group field to remove field from.
     * @return bool                    True if field was removed.
     */
    public function remove_field($field_id, $parent_field_id = '')
    {
    }
    /**
     * Update or add a property to a field
     *
     * @since  2.0.0
     * @param  string $field_id        Field id.
     * @param  string $property        Field property to set/update.
     * @param  mixed  $value           Value to set the field property.
     * @param  string $parent_field_id (optional) The field id of the group field to remove field from.
     * @return mixed                   Field id. Strict compare to false, as success can return a falsey value (like 0).
     */
    public function update_field_property($field_id, $property, $value, $parent_field_id = '')
    {
    }
    /**
     * Check if field ids match a field and return the index/field id
     *
     * @since  2.0.2
     * @param  string $field_id        Field id.
     * @param  string $parent_field_id (optional) Parent field id.
     * @return mixed                    Array of field/parent ids, or false.
     */
    public function get_field_ids($field_id, $parent_field_id = '')
    {
    }
    /**
     * When using the old array filter, it is unlikely field array indexes will be the field id.
     *
     * @since  2.0.2
     * @param  string $field_id The field id.
     * @param  array  $fields   Array of fields to search.
     * @return mixed            Field index or false.
     */
    public function search_old_school_array($field_id, $fields)
    {
    }
    /**
     * Handles metabox property callbacks, and passes this $cmb object as property.
     *
     * @since 2.2.3
     * @param  callable $cb                The callback method/function/closure.
     * @param  mixed    $additional_params Any additoinal parameters which should be passed to the callback.
     * @return mixed                       Return of the callback function.
     */
    public function do_callback($cb, $additional_params = \null)
    {
    }
    /**
     * Generate a unique nonce field for each registered meta_box
     *
     * @since  2.0.0
     * @return void
     */
    public function nonce_field()
    {
    }
    /**
     * Generate a unique nonce for each registered meta_box
     *
     * @since  2.0.0
     * @return string unique nonce string.
     */
    public function nonce()
    {
    }
    /**
     * Checks if field-saving updated any fields.
     *
     * @since  2.2.5
     *
     * @return bool
     */
    public function was_updated()
    {
    }
    /**
     * Whether this box is an "alternate context" box. This means the box has a 'context' property defined as:
     * 'form_top', 'before_permalink', 'after_title', or 'after_editor'.
     *
     * @since  2.2.4
     * @return bool
     */
    public function is_alternate_context_box()
    {
    }
    /**
     * Magic getter for our object.
     *
     * @param  string $property Object property.
     * @throws Exception Throws an exception if the field is invalid.
     * @return mixed
     */
    public function __get($property)
    {
    }
}
/**
 * CMB2 ajax methods
 * (i.e. a lot of work to get oEmbeds to work with non-post objects)
 *
 * @since  0.9.5
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 */
class CMB2_Ajax
{
    // Whether to hijack the oembed cache system.
    protected $hijack = \false;
    protected $object_id = 0;
    protected $embed_args = array();
    protected $object_type = 'post';
    protected $ajax_update = \false;
    /**
     * Instance of this class.
     *
     * @since 2.2.2
     * @var object
     */
    protected static $instance;
    /**
     * Get the singleton instance of this class.
     *
     * @since 2.2.2
     * @return CMB2_Ajax
     */
    public static function get_instance()
    {
    }
    /**
     * Constructor
     *
     * @since 2.2.0
     */
    protected function __construct()
    {
    }
    /**
     * Handles our oEmbed ajax request
     *
     * @since  0.9.5
     * @return mixed oEmbed embed code | fallback | error message
     */
    public function oembed_handler()
    {
    }
    /**
     * Retrieves oEmbed from url/object ID
     *
     * @since  0.9.5
     * @param  array $args Arguments for method.
     * @return mixed HTML markup with embed or fallback.
     */
    public function get_oembed_no_edit($args)
    {
    }
    /**
     * Retrieves oEmbed from url/object ID
     *
     * @since  0.9.5
     * @param  array $args Arguments for method.
     * @return string HTML markup with embed or fallback.
     */
    public function get_oembed($args)
    {
    }
    /**
     * Hijacks retrieving of cached oEmbed.
     * Returns cached data from relevant object metadata (vs postmeta)
     *
     * @since  0.9.5
     * @param  boolean $check     Whether to retrieve postmeta or override.
     * @param  int     $object_id Object ID.
     * @param  string  $meta_key  Object metakey.
     * @return mixed              Object's oEmbed cached data.
     */
    public function hijack_oembed_cache_get($check, $object_id, $meta_key)
    {
    }
    /**
     * Hijacks saving of cached oEmbed.
     * Saves cached data to relevant object metadata (vs postmeta)
     *
     * @since  0.9.5
     * @param  boolean $check      Whether to continue setting postmeta.
     * @param  int     $object_id  Object ID to get postmeta from.
     * @param  string  $meta_key   Postmeta's key.
     * @param  mixed   $meta_value Value of the postmeta to be saved.
     * @return boolean             Whether to continue setting.
     */
    public function hijack_oembed_cache_set($check, $object_id, $meta_key, $meta_value)
    {
    }
    /**
     * Gets/updates the cached oEmbed value from/to relevant object metadata (vs postmeta).
     *
     * @since 1.3.0
     *
     * @param string $meta_key Postmeta's key.
     * @return mixed
     */
    protected function cache_action($meta_key)
    {
    }
    /**
     * Hooks in when options-page data is saved to clean stale
     * oembed cache data from the option value.
     *
     * @since  2.2.0
     * @param  string $option_key The options-page option key.
     * @return void
     */
    public static function clean_stale_options_page_oembeds($option_key)
    {
    }
}
/**
 * A CMB2 object instance registry for storing every CMB2 instance.
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Boxes
{
    /**
     * Array of all metabox objects.
     *
     * @since 2.0.0
     * @var array
     */
    protected static $cmb2_instances = array();
    /**
     * Add a CMB2 instance object to the registry.
     *
     * @since 1.X.X
     *
     * @param CMB2 $cmb_instance CMB2 instance.
     */
    public static function add(\CMB2 $cmb_instance)
    {
    }
    /**
     * Remove a CMB2 instance object from the registry.
     *
     * @since 1.X.X
     *
     * @param string $cmb_id A CMB2 instance id.
     */
    public static function remove($cmb_id)
    {
    }
    /**
     * Retrieve a CMB2 instance by cmb id.
     *
     * @since 1.X.X
     *
     * @param string $cmb_id A CMB2 instance id.
     *
     * @return CMB2|bool False or CMB2 object instance.
     */
    public static function get($cmb_id)
    {
    }
    /**
     * Retrieve all CMB2 instances registered.
     *
     * @since  1.X.X
     * @return CMB2[] Array of all registered cmb2 instances.
     */
    public static function get_all()
    {
    }
    /**
     * Retrieve all CMB2 instances that have the specified property set.
     *
     * @since  2.4.0
     * @param  string $property Property name.
     * @param  mixed  $compare  (Optional) The value to compare.
     * @return CMB2[]           Array of matching cmb2 instances.
     */
    public static function get_by($property, $compare = 'nocompare')
    {
    }
    /**
     * Retrieve all CMB2 instances as long as they do not include the ignored property.
     *
     * @since  2.4.0
     * @param  string $property  Property name.
     * @param  mixed  $to_ignore The value to ignore.
     * @return CMB2[]            Array of matching cmb2 instances.
     */
    public static function filter_by($property, $to_ignore = \null)
    {
    }
    /**
     * Deprecated and left for back-compatibility. The original `get_by_property`
     * method was misnamed and never actually used by CMB2 core.
     *
     * @since  2.2.3
     *
     * @param  string $property  Property name.
     * @param  mixed  $to_ignore The value to ignore.
     * @return CMB2[]            Array of matching cmb2 instances.
     */
    public static function get_by_property($property, $to_ignore = \null)
    {
    }
}
/**
 * CMB2 field objects
 *
 * @since  1.1.0
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @method string _id()
 * @method string type()
 * @method mixed fields()
 */
class CMB2_Field extends \CMB2_Base
{
    /**
     * The object properties name.
     *
     * @var   string
     * @since 2.2.3
     */
    protected $properties_name = 'args';
    /**
     * Field arguments
     *
     * @var   mixed
     * @since 1.1.0
     */
    public $args = array();
    /**
     * Field group object or false (if no group)
     *
     * @var   mixed
     * @since 1.1.0
     */
    public $group = \false;
    /**
     * Field meta value
     *
     * @var   mixed
     * @since 1.1.0
     */
    public $value = \null;
    /**
     * Field meta value
     *
     * @var   mixed
     * @since 1.1.0
     */
    public $escaped_value = \null;
    /**
     * Grouped Field's current numeric index during the save process
     *
     * @var   mixed
     * @since 2.0.0
     */
    public $index = 0;
    /**
     * Array of field options
     *
     * @var   array
     * @since 2.0.0
     */
    protected $field_options = array();
    /**
     * Array of provided field text strings
     *
     * @var   array
     * @since 2.0.0
     */
    protected $strings;
    /**
     * The field's render context. In most cases, 'edit', but can be 'display'.
     *
     * @var   string
     * @since 2.2.2
     */
    public $render_context = 'edit';
    /**
     * All CMB2_Field callable field arguments.
     * Can be used to determine if a field argument is callable.
     *
     * @var array
     */
    public static $callable_fields = array('default_cb', 'classes_cb', 'options_cb', 'text_cb', 'label_cb', 'render_row_cb', 'display_cb', 'before_group', 'before_group_row', 'before_row', 'before', 'before_field', 'after_field', 'after', 'after_row', 'after_group_row', 'after_group');
    /**
     * Represents a unique hash representing this field.
     *
     * @since  2.2.4
     *
     * @var string
     */
    protected $hash_id = '';
    /**
     * Constructs our field object
     *
     * @since 1.1.0
     * @param array $args Field arguments.
     */
    public function __construct($args)
    {
    }
    /**
     * Non-existent methods fallback to checking for field arguments of the same name
     *
     * @since  1.1.0
     * @param  string $name     Method name.
     * @param  array  $arguments Array of passed-in arguments.
     * @return mixed             Value of field argument
     */
    public function __call($name, $arguments)
    {
    }
    /**
     * Retrieves the field id
     *
     * @since  1.1.0
     * @param  boolean $raw Whether to retrieve pre-modidifed id.
     * @return string       Field id
     */
    public function id($raw = \false)
    {
    }
    /**
     * Get a field argument
     *
     * @since  1.1.0
     * @param  string $key  Argument to check.
     * @param  string $_key Sub argument to check.
     * @return mixed        Argument value or false if non-existent
     */
    public function args($key = '', $_key = '')
    {
    }
    /**
     * Retrieve a portion of a field property
     *
     * @since  1.1.0
     * @param  string $var Field property to check.
     * @param  string $key Field property array key to check.
     * @return mixed        Queried property value or false
     */
    public function _data($var, $key = '')
    {
    }
    /**
     * Get Field's value
     *
     * @since  1.1.0
     * @param  string $key If value is an array, is used to get array key->value.
     * @return mixed       Field value or false if non-existent
     */
    public function value($key = '')
    {
    }
    /**
     * Retrieves metadata/option data
     *
     * @since  1.0.1
     * @param  string $field_id Meta key/Option array key.
     * @param  array  $args     Override arguments.
     * @return mixed            Meta/Option value
     */
    public function get_data($field_id = '', $args = array())
    {
    }
    /**
     * Updates metadata/option data.
     *
     * @since  1.0.1
     * @param  mixed $new_value Value to update data with.
     * @param  bool  $single    Whether data is an array (add_metadata).
     * @return mixed
     */
    public function update_data($new_value, $single = \true)
    {
    }
    /**
     * Removes/updates metadata/option data.
     *
     * @since  1.0.1
     * @param  string $old Old value.
     * @return mixed
     */
    public function remove_data($old = '')
    {
    }
    /**
     * Data variables for get/set data methods
     *
     * @since  1.1.0
     * @param  array $args Override arguments.
     * @return array       Updated arguments
     */
    public function data_args($args = array())
    {
    }
    /**
     * Checks if field has a registered sanitization callback
     *
     * @since  1.0.1
     * @param  mixed $meta_value Meta value.
     * @return mixed             Possibly sanitized meta value
     */
    public function sanitization_cb($meta_value)
    {
    }
    /**
     * Process $_POST data to save this field's value
     *
     * @since  2.0.3
     * @param  array $data_to_save $_POST data to check.
     * @return array|int|bool                Result of save, false on failure
     */
    public function save_field_from_data(array $data_to_save)
    {
    }
    /**
     * Sanitize/store a value to this field
     *
     * @param array|string $meta_value Desired value to sanitize/store.
     *
     * @since  2.0.0
     * @return array|int|bool              Result of save. false on failure
     */
    public function save_field($meta_value)
    {
    }
    /**
     * Determine if current type is exempt from escaping
     *
     * @since  1.1.0
     * @return bool  True if exempt
     */
    public function escaping_exception()
    {
    }
    /**
     * Determine if current type cannot be repeatable
     *
     * @since  1.1.0
     * @param  string $type Field type to check.
     * @return bool         True if type cannot be repeatable
     */
    public function repeatable_exception($type)
    {
    }
    /**
     * Determine if current type has its own defaults field-arguments method.
     *
     * @since  2.2.6
     * @param  string $type Field type to check.
     * @return bool         True if has own method.
     */
    public function has_args_method($type)
    {
    }
    /**
     * Escape the value before output. Defaults to 'esc_attr()'
     *
     * @since  1.0.1
     * @param  callable|string $func       Escaping function (if not esc_attr()).
     * @param  mixed           $meta_value Meta value.
     * @return mixed                Final value.
     */
    public function escaped_value($func = 'esc_attr', $meta_value = '')
    {
    }
    /**
     * Return non-empty value or field default if value IS empty
     *
     * @since  2.0.0
     * @param  mixed $meta_value Field value.
     * @return mixed             Field value, or default value
     */
    public function val_or_default($meta_value)
    {
    }
    /**
     * Offset a time value based on timezone
     *
     * @since  1.0.0
     * @return string Offset time string
     */
    public function field_timezone_offset()
    {
    }
    /**
     * Return timezone string
     *
     * @since  1.0.0
     * @return string Timezone string
     */
    public function field_timezone()
    {
    }
    /**
     * Format the timestamp field value based on the field date/time format arg
     *
     * @param int    $meta_value Timestamp.
     * @param string $format     Either date_format or time_format.
     *
     * @since  2.0.0
     * @return string             Formatted date
     */
    public function format_timestamp($meta_value, $format = 'date_format')
    {
    }
    /**
     * Return a formatted timestamp for a field
     *
     * @since  2.0.0
     * @param  string     $format     Either date_format or time_format.
     * @param  string|int $meta_value Optional meta value to check.
     * @return string             Formatted date
     */
    public function get_timestamp_format($format = 'date_format', $meta_value = 0)
    {
    }
    /**
     * Get timestamp from text date
     *
     * @param string $value Date value.
     *
     * @since  2.2.0
     * @return mixed         Unix timestamp representing the date.
     */
    public function get_timestamp_from_value($value)
    {
    }
    /**
     * Get timestamp from text datetime
     *
     * @param string $value Date value.
     *
     * @since  3.10.1.7
     * @return mixed         Unix timestamp representing the date.
     */
    public function get_timestamp_from_datetime_value($value)
    {
    }
    /**
     * Get field render callback and Render the field row
     *
     * @since 1.0.0
     */
    public function render_field()
    {
    }
    /**
     * Default field render callback
     *
     * @since 2.1.1
     */
    public function render_field_callback()
    {
    }
    /**
     * The default label_cb callback (if not a title field)
     *
     * @since  2.1.1
     * @return string Label html markup.
     */
    public function label()
    {
    }
    /**
     * Defines the classes for the current CMB2 field row
     *
     * @since  2.0.0
     * @return string Space concatenated list of classes
     */
    public function row_classes()
    {
    }
    /**
     * Get field display callback and render the display value in the column.
     *
     * @since 2.2.2
     */
    public function render_column()
    {
    }
    /**
     * The method to fetch the value for this field for the REST API.
     *
     * @since 2.5.0
     */
    public function get_rest_value()
    {
    }
    /**
     * Get a field object for a supporting field. (e.g. file field)
     *
     * @since  2.7.0
     *
     * @return CMB2_Field|bool Supporting field object, if supported.
     */
    public function get_supporting_field()
    {
    }
    /**
     * Default callback to outputs field value in a display format.
     *
     * @since 2.2.2
     */
    public function display_value_callback()
    {
    }
    /**
     * Replaces a hash key - {#} - with the repeatable index
     *
     * @since  1.2.0
     * @param  string $value Value to update.
     * @return string        Updated value
     */
    public function replace_hash($value)
    {
    }
    /**
     * Retrieve text parameter from field's text array (if it has one), or use fallback text
     * For back-compatibility, falls back to checking the options array.
     *
     * @since  2.2.2
     * @param  string $text_key Key in field's text array.
     * @param  string $fallback Fallback text.
     * @return string            Text
     */
    public function get_string($text_key, $fallback)
    {
    }
    /**
     * Retrieve options args.
     *
     * @since  2.0.0
     * @param  string $key Specific option to retrieve.
     * @return array|mixed Array of options or specific option.
     */
    public function options($key = '')
    {
    }
    /**
     * Generates/sets options args. Calls options_cb if it exists.
     *
     * @since  2.2.5
     *
     * @return array Array of options
     */
    public function set_options()
    {
    }
    /**
     * Store JS dependencies as part of the field args.
     *
     * @since 2.2.0
     * @param array $dependencies Dependies to register for this field.
     */
    public function add_js_dependencies($dependencies = array())
    {
    }
    /**
     * Send field data to JS.
     *
     * @since 2.2.0
     */
    public function register_js_data()
    {
    }
    /**
     * Get an array of some of the field data to be used in the Javascript.
     *
     * @since  2.2.4
     *
     * @return array
     */
    public function js_data()
    {
    }
    /**
     * Returns a unique hash representing this field.
     *
     * @since  2.2.4
     *
     * @return string
     */
    public function hash_id()
    {
    }
    /**
     * Gets the id of the group field if this field is part of a group.
     *
     * @since  2.2.4
     *
     * @return string
     */
    public function group_id()
    {
    }
    /**
     * Get CMB2_Field default value, either from default param or default_cb param.
     *
     * @since  0.2.2
     *
     * @return mixed  Default field value
     */
    public function get_default()
    {
    }
    /**
     * Fills in empty field parameters with defaults
     *
     * @since 1.1.0
     *
     * @param  array $args Field config array.
     * @return array        Modified field config array.
     */
    public function _set_field_defaults($args)
    {
    }
    /**
     * Sets default arguments for the group field types.
     *
     * @since 2.2.6
     *
     * @param  array $args Field config array.
     * @return array        Modified field config array.
     */
    protected function set_field_defaults_group($args)
    {
    }
    /**
     * Sets default arguments for the wysiwyg field types.
     *
     * @since 2.2.6
     *
     * @param  array $args Field config array.
     * @return array        Modified field config array.
     */
    protected function set_field_defaults_wysiwyg($args)
    {
    }
    /**
     * Sets default arguments for the all-or-nothing field types.
     *
     * @since 2.2.6
     *
     * @param  array $args Field config array.
     * @return array        Modified field config array.
     */
    protected function set_field_defaults_all_or_nothing_types($args)
    {
    }
    /**
     * Sets default arguments for group sub-fields.
     *
     * @since 2.2.6
     *
     * @param  array $args Field config array.
     * @return array        Modified field config array.
     */
    protected function set_group_sub_field_defaults($args)
    {
    }
    /**
     * Gets the default arguments for all fields.
     *
     * @since 2.2.6
     *
     * @param  array $args Field config array.
     * @return array        Field defaults.
     */
    protected function get_default_field_args($args)
    {
    }
    /**
     * Get default field arguments specific to this CMB2 object.
     *
     * @since  2.2.0
     * @param  array      $field_args  Metabox field config array.
     * @param  CMB2_Field $field_group (optional) CMB2_Field object (group parent).
     * @return array                   Array of field arguments.
     */
    protected function get_default_args($field_args, $field_group = \null)
    {
    }
    /**
     * Returns a cloned version of this field object, but with
     * modified/overridden field arguments.
     *
     * @since  2.2.2
     * @param  array $field_args Array of field arguments, or entire array of
     *                           arguments for CMB2_Field.
     *
     * @return CMB2_Field         The new CMB2_Field instance.
     */
    public function get_field_clone($field_args)
    {
    }
    /**
     * Returns the CMB2 instance this field is registered to.
     *
     * @since  2.2.2
     *
     * @return CMB2|WP_Error If new CMB2_Field is called without cmb_id arg, returns error.
     */
    public function get_cmb()
    {
    }
    /**
     * Converts deprecated field parameters to the current/proper parameter, and throws a deprecation notice.
     *
     * @since  2.2.3
     * @param  array $args Metabox field config array.
     * @return array       Modified field config array.
     */
    protected function convert_deprecated_params($args)
    {
    }
}
/**
 * CMB2 field display base.
 *
 * @since 2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Field_Display
{
    /**
     * A CMB field object
     *
     * @var   CMB2_Field object
     * @since 2.2.2
     */
    public $field;
    /**
     * The CMB field object's value.
     *
     * @var   mixed
     * @since 2.2.2
     */
    public $value;
    /**
     * Get the corresponding display class for the field type.
     *
     * @since  2.2.2
     * @param  CMB2_Field $field Requested field type.
     * @return CMB2_Field_Display
     */
    public static function get(\CMB2_Field $field)
    {
    }
    /**
     * Setup our class vars
     *
     * @since 2.2.2
     * @param CMB2_Field $field A CMB2 field object.
     */
    public function __construct(\CMB2_Field $field)
    {
    }
    /**
     * Catchall method if field's 'display_cb' is NOT defined, or field type does
     * not have a corresponding display method
     *
     * @since 2.2.2
     */
    public function display()
    {
    }
    /**
     * Default fallback display method.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Text_Url extends \CMB2_Field_Display
{
    /**
     * Display url value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Text_Money extends \CMB2_Field_Display
{
    /**
     * Display text_money value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Colorpicker extends \CMB2_Field_Display
{
    /**
     * Display color picker value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Checkbox extends \CMB2_Field_Display
{
    /**
     * Display multicheck value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Select extends \CMB2_Field_Display
{
    /**
     * Display select value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Multicheck extends \CMB2_Field_Display
{
    /**
     * Display multicheck value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Textarea extends \CMB2_Field_Display
{
    /**
     * Display textarea value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Textarea_Code extends \CMB2_Field_Display
{
    /**
     * Display textarea_code value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Text_Time extends \CMB2_Field_Display
{
    /**
     * Display text_time value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Text_Date extends \CMB2_Field_Display
{
    /**
     * Display text_date value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Text_Date_Timezone extends \CMB2_Field_Display
{
    /**
     * Display text_datetime_timestamp_timezone value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Taxonomy_Radio extends \CMB2_Field_Display
{
    /**
     * Display single taxonomy value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_Taxonomy_Multicheck extends \CMB2_Field_Display
{
    /**
     * Display taxonomy values.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_File extends \CMB2_Field_Display
{
    /**
     * Display file value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
    protected function file_output($url_value, $id, \CMB2_Type_File_Base $field_type)
    {
    }
}
class CMB2_Display_File_List extends \CMB2_Display_File
{
    /**
     * Display file_list value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
class CMB2_Display_oEmbed extends \CMB2_Field_Display
{
    /**
     * Display oembed value.
     *
     * @since 2.2.2
     */
    protected function _display()
    {
    }
}
/**
 * Base class for hooking CMB2 into WordPress.
 *
 * @since  2.2.0
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @property-read string $object_type
 * @property-read CMB2   $cmb
 */
abstract class CMB2_Hookup_Base
{
    /**
     * CMB2 object.
     *
     * @var   CMB2 object
     * @since 2.0.2
     */
    protected $cmb;
    /**
     * The object type we are performing the hookup for
     *
     * @var   string
     * @since 2.0.9
     */
    protected $object_type = 'post';
    /**
     * A functionalized constructor, used for the hookup action callbacks.
     *
     * @since  2.2.6
     *
     * @throws Exception Failed implementation.
     *
     * @param  CMB2 $cmb The CMB2 object to hookup.
     */
    public static function maybe_init_and_hookup(\CMB2 $cmb)
    {
    }
    /**
     * Constructor
     *
     * @since 2.0.0
     * @param CMB2 $cmb The CMB2 object to hookup.
     */
    public function __construct(\CMB2 $cmb)
    {
    }
    public abstract function universal_hooks();
    /**
     * Ensures WordPress hook only gets fired once per object.
     *
     * @since  2.0.0
     * @param string   $action        The name of the filter to hook the $hook callback to.
     * @param callback $hook          The callback to be run when the filter is applied.
     * @param integer  $priority      Order the functions are executed.
     * @param int      $accepted_args The number of arguments the function accepts.
     */
    public function once($action, $hook, $priority = 10, $accepted_args = 1)
    {
    }
    /**
     * Magic getter for our object.
     *
     * @param string $field Property to return.
     * @throws Exception Throws an exception if the field is invalid.
     * @return mixed
     */
    public function __get($field)
    {
    }
}
/**
 * Handles hooking CMB2 forms/metaboxes into the post/attachement/user screens
 * and handles hooking in and saving those fields.
 *
 * @since  2.0.0
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Hookup extends \CMB2_Hookup_Base
{
    /**
     * Only allow JS registration once
     *
     * @var   bool
     * @since 2.0.7
     */
    protected static $js_registration_done = \false;
    /**
     * Only allow CSS registration once
     *
     * @var   bool
     * @since 2.0.7
     */
    protected static $css_registration_done = \false;
    /**
     * CMB taxonomies array for term meta
     *
     * @var   array
     * @since 2.2.0
     */
    protected $taxonomies = array();
    /**
     * Custom field columns.
     *
     * @var   array
     * @since 2.2.2
     */
    protected $columns = array();
    /**
     * Array of CMB2_Options_Hookup instances if options page metabox.
     *
     * @var   CMB2_Options_Hookup[]|null
     * @since 2.2.5
     */
    protected $options_hookup = \null;
    /**
     * A functionalized constructor, used for the hookup action callbacks.
     *
     * @since  2.2.6
     *
     * @param  CMB2 $cmb The CMB2 object to hookup.
     *
     * @return CMB2_Hookup_Base $hookup The hookup object.
     */
    public static function maybe_init_and_hookup(\CMB2 $cmb)
    {
    }
    public function universal_hooks()
    {
    }
    public function post_hooks()
    {
    }
    public function comment_hooks()
    {
    }
    public function user_hooks()
    {
    }
    public function term_hooks()
    {
    }
    public function options_page_hooks()
    {
    }
    /**
     * Registers styles for CMB2
     *
     * @since 2.0.7
     */
    protected static function register_styles()
    {
    }
    /**
     * Registers scripts for CMB2
     *
     * @since  2.0.7
     */
    protected static function register_js()
    {
    }
    /**
     * Registers scripts and styles for CMB2
     *
     * @since  1.0.0
     */
    public static function register_scripts()
    {
    }
    /**
     * Enqueues scripts and styles for CMB2 in admin_head.
     *
     * @since 1.0.0
     *
     * @param string $hook Current hook for the admin page.
     */
    public function do_scripts($hook)
    {
    }
    /**
     * Register the CMB2 field column headers.
     *
     * @since 2.2.2
     *
     * @param array $columns Array of columns available for the admin page.
     */
    public function register_column_headers($columns)
    {
    }
    /**
     * The CMB2 field column display output.
     *
     * @since 2.2.2
     *
     * @param string $column_name Current column name.
     * @param mixed  $object_id Current object ID.
     */
    public function column_display($column_name, $object_id)
    {
    }
    /**
     * Returns the columns sortable array.
     *
     * @since 2.6.1
     *
     * @param array $columns An array of sortable columns.
     *
     * @return array $columns An array of sortable columns with CMB2 columns.
     */
    public function columns_sortable($columns)
    {
    }
    /**
     * Return the query object to order by custom columns if selected
     *
     * @since 2.6.1
     *
     * @param object $query Object query from WordPress
     *
     * @return void
     */
    public function columns_sortable_orderby($query)
    {
    }
    /**
     * Returns the column display.
     *
     * @since 2.2.2
     */
    public function return_column_display($empty, $custom_column, $object_id)
    {
    }
    /**
     * Output the CMB2 box/fields in an alternate context (not in a standard metabox area).
     *
     * @since 2.2.4
     */
    public function add_context_metaboxes()
    {
    }
    /**
     * Output the CMB2 box/fields in an alternate context (not in a standard metabox area).
     *
     * @since 2.2.4
     */
    public function output_context_metabox()
    {
    }
    /**
     * Output the opening markup for a context box.
     *
     * @since 2.2.4
     * @param bool $add_handle Whether to add the metabox handle and opening div for .inside.
     */
    public function context_box_title_markup_open($add_handle = \true)
    {
    }
    /**
     * Output the closing markup for a context box.
     *
     * @since 2.2.4
     * @param bool $add_inside_close Whether to add closing div for .inside.
     */
    public function context_box_title_markup_close($add_inside_close = \true)
    {
    }
    /**
     * Add metaboxes (to 'post' or 'comment' object types)
     *
     * @since 1.0.0
     */
    public function add_metaboxes()
    {
    }
    /**
     * Remove the specified default taxonomy metaboxes for a post-type.
     *
     * @since 2.2.3
     *
     */
    public function remove_default_tax_metaboxes()
    {
    }
    /**
     * Modify metabox postbox classes.
     *
     * @since 2.2.4
     * @param  array $classes Array of classes.
     * @return array           Modified array of classes
     */
    public function postbox_classes($classes)
    {
    }
    /**
     * Modify metabox altnernate context postbox classes.
     *
     * @since 2.2.4
     * @param  array $classes Array of classes.
     * @return array           Modified array of classes
     */
    protected function alternate_context_postbox_classes($classes)
    {
    }
    /**
     * Display metaboxes for a post or comment object.
     *
     * @since  1.0.0
     */
    public function metabox_callback()
    {
    }
    /**
     * Display metaboxes for new user page.
     *
     * @since 1.0.0
     *
     * @param mixed $section User section metabox.
     */
    public function user_new_metabox($section)
    {
    }
    /**
     * Display metaboxes for a user object.
     *
     * @since  1.0.0
     */
    public function user_metabox()
    {
    }
    /**
     * Display metaboxes for a taxonomy term object.
     *
     * @since  2.2.0
     */
    public function term_metabox()
    {
    }
    /**
     * Display metaboxes for an object type.
     *
     * @since 2.2.0
     * @param  string $type Object type.
     * @return void
     */
    public function show_form_for_type($type)
    {
    }
    /**
     * Determines if metabox should be shown in current context.
     *
     * @since 2.0.0
     * @return bool Whether metabox should be added/shown.
     */
    public function show_on()
    {
    }
    /**
     * Get the CMB priority property set to numeric hook priority.
     *
     * @since 2.2.0
     *
     * @param integer $default Default display hook priority.
     * @return integer          Hook priority.
     */
    public function get_priority($default = 10)
    {
    }
    /**
     * Save data from post metabox
     *
     * @since 1.0.0
     * @param  int   $post_id Post ID.
     * @param  mixed $post    Post object.
     * @return void
     */
    public function save_post($post_id, $post = \false)
    {
    }
    /**
     * Save data from comment metabox.
     *
     * @since 2.0.9
     * @param  int $comment_id Comment ID.
     * @return void
     */
    public function save_comment($comment_id)
    {
    }
    /**
     * Save data from user fields.
     *
     * @since 1.0.x
     * @param  int $user_id User ID.
     * @return void
     */
    public function save_user($user_id)
    {
    }
    /**
     * Save data from term fields
     *
     * @since 2.2.0
     * @param int    $term_id  Term ID.
     * @param int    $tt_id    Term Taxonomy ID.
     * @param string $taxonomy Taxonomy.
     * @return void
     */
    public function save_term($term_id, $tt_id, $taxonomy = '')
    {
    }
    /**
     * Delete term meta when a term is deleted.
     *
     * @since 2.2.0
     * @param  int    $term_id  Term ID.
     * @param  int    $tt_id    Term Taxonomy ID.
     * @param  string $taxonomy Taxonomy.
     * @return void
     */
    public function delete_term($term_id, $tt_id, $taxonomy = '')
    {
    }
    /**
     * Determines if the current object is able to be saved.
     *
     * @since  2.0.9
     * @param  string $type Current object type.
     * @return bool         Whether object can be saved.
     */
    public function can_save($type = '')
    {
    }
    /**
     * Determine if taxonomy of term being modified is cmb2-editable.
     *
     * @since 2.2.0
     *
     * @param string $taxonomy Taxonomy of term being modified.
     * @return bool             Whether taxonomy is editable.
     */
    public function taxonomy_can_save($taxonomy)
    {
    }
    /**
     * Enqueues the 'cmb2-display-styles' if the conditions match (has columns, on the right page, etc).
     *
     * @since  2.2.2.1
     */
    protected function maybe_enqueue_column_display_styles()
    {
    }
    /**
     * Includes CMB2 styles.
     *
     * @since 2.0.0
     *
     * @param string $handle CSS handle.
     * @return mixed
     */
    public static function enqueue_cmb_css($handle = 'cmb2-styles')
    {
    }
    /**
     * Includes CMB2 JS.
     *
     * @since  2.0.0
     */
    public static function enqueue_cmb_js()
    {
    }
}
/**
 * Handles the dependencies and enqueueing of the CMB2 JS scripts
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_JS
{
    /**
     * The CMB2 JS handle
     *
     * @var   string
     * @since 2.0.7
     */
    protected static $handle = 'cmb2-scripts';
    /**
     * The CMB2 JS variable name
     *
     * @var   string
     * @since 2.0.7
     */
    protected static $js_variable = 'cmb2_l10';
    /**
     * Array of CMB2 JS dependencies
     *
     * @var   array
     * @since 2.0.7
     */
    protected static $dependencies = ['jquery' => 'jquery', 'jquery-ui-sortable' => 'jquery-ui-sortable'];
    /**
     * Array of CMB2 fields model data for JS.
     *
     * @var   array
     * @since 2.4.0
     */
    protected static $fields = [];
    /**
     * Add a dependency to the array of CMB2 JS dependencies
     *
     * @since 2.0.7
     * @param array|string $dependencies Array (or string) of dependencies to add.
     */
    public static function add_dependencies($dependencies)
    {
    }
    /**
     * Add field model data to the array for JS.
     *
     * @since 2.4.0
     *
     * @param CMB2_Field $field Field object.
     */
    public static function add_field_data(\CMB2_Field $field)
    {
    }
    /**
     * Enqueue the CMB2 JS
     *
     * @since  2.0.7
     */
    public static function enqueue()
    {
    }
    /**
     * Register or enqueue the wp-color-picker-alpha script.
     *
     * @since  2.2.7
     *
     * @param  boolean $enqueue Whether or not to enqueue.
     *
     * @return void
     */
    public static function register_colorpicker_alpha($enqueue = \false)
    {
    }
    /**
     * Register or enqueue the jquery-ui-datetimepicker script.
     *
     * @since  2.2.7
     *
     * @param  boolean $enqueue Whether or not to enqueue.
     *
     * @return void
     */
    public static function register_datetimepicker($enqueue = \false)
    {
    }
    /**
     * We need to register colorpicker on the front-end
     *
     * @since  2.0.7
     */
    protected static function colorpicker_frontend()
    {
    }
    /**
     * Localize the php variables for CMB2 JS
     *
     * @since  2.0.7
     *
     * @param mixed $debug Whether or not we are debugging.
     */
    protected static function localize($debug)
    {
    }
}
/**
 * CMB2 Utility classes for handling multi-dimensional array data for options
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
/**
 * Retrieves an instance of CMB2_Option based on the option key
 *
 * @package   CMB2
 * @author    CMB2 team
 */
class CMB2_Options
{
    /**
     * Array of all CMB2_Option instances
     *
     * @var   array
     * @since 1.0.0
     */
    protected static $option_sets = array();
    public static function get($option_key)
    {
    }
}
/**
 * Handles getting/setting of values to an option array
 * for a specific option key
 *
 * @package   CMB2
 * @author    CMB2 team
 */
class CMB2_Option
{
    /**
     * Options array
     *
     * @var array
     */
    protected $options = array();
    /**
     * Current option key
     *
     * @var string
     */
    protected $key = '';
    /**
     * Initiate option object
     *
     * @param string $option_key Option key where data will be saved.
     *                           Leave empty for temporary data store.
     * @since 2.0.0
     */
    public function __construct($option_key = '')
    {
    }
    /**
     * Delete the option from the db
     *
     * @since  2.0.0
     * @return mixed Delete success or failure
     */
    public function delete_option()
    {
    }
    /**
     * Removes an option from an option array
     *
     * @since  1.0.1
     * @param string $field_id Option array field key.
     * @param bool   $resave Whether or not to resave.
     * @return array             Modified options
     */
    public function remove($field_id, $resave = \false)
    {
    }
    /**
     * Retrieves an option from an option array
     *
     * @since  1.0.1
     * @param string $field_id Option array field key.
     * @param mixed  $default  Fallback value for the option.
     * @return array             Requested field or default
     */
    public function get($field_id, $default = \false)
    {
    }
    /**
     * Updates Option data
     *
     * @since  1.0.1
     * @param string $field_id Option array field key.
     * @param mixed  $value    Value to update data with.
     * @param bool   $resave   Whether to re-save the data.
     * @param bool   $single   Whether data should not be an array.
     * @return boolean Return status of update.
     */
    public function update($field_id, $value = '', $resave = \false, $single = \true)
    {
    }
    /**
     * Saves the option array
     * Needs to be run after finished using remove/update_option
     *
     * @uses apply_filters() Calls 'cmb2_override_option_save_{$this->key}' hook
     * to allow overwriting the option value to be stored.
     *
     * @since  1.0.1
     * @param  array $options Optional options to override.
     * @return bool           Success/Failure
     */
    public function set($options = array())
    {
    }
    /**
     * Retrieve option value based on name of option.
     *
     * @uses apply_filters() Calls 'cmb2_override_option_get_{$this->key}' hook to allow
     * overwriting the option value to be retrieved.
     *
     * @since  1.0.1
     * @param  mixed $default Optional. Default value to return if the option does not exist.
     * @return mixed          Value set for the option.
     */
    public function get_options($default = \null)
    {
    }
    /**
     * Magic getter for our object.
     *
     * @since 2.6.0
     *
     * @param string $field Requested property.
     * @throws Exception Throws an exception if the field is invalid.
     * @return mixed
     */
    public function __get($field)
    {
    }
}
/**
 * Handles hooking CMB2 forms/metaboxes into the post/attachement/user screens
 * and handles hooking in and saving those fields.
 *
 * @since  2.0.0
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @property-read string $option_key
 * @property-read string $object_type
 * @property-read CMB2   $cmb
 */
class CMB2_Options_Hookup extends \CMB2_Hookup
{
    /**
     * The object type we are performing the hookup for
     *
     * @var   string
     * @since 2.0.9
     */
    protected $object_type = 'options-page';
    /**
     * Options page key.
     *
     * @var   string
     * @since 2.2.5
     */
    protected $option_key = '';
    /**
     * Constructor
     *
     * @since 2.0.0
     * @param CMB2   $cmb        The CMB2 object to hookup.
     * @param string $option_key Option key to use.
     */
    public function __construct(\CMB2 $cmb, $option_key)
    {
    }
    public function hooks()
    {
    }
    /**
     * Hook up our admin menu item and admin page.
     *
     * @since  2.2.5
     *
     * @return void
     */
    public function options_page_menu_hooks()
    {
    }
    /**
     * If there is a message callback, let it determine how to register the message,
     * else add a settings message if on this settings page.
     *
     * @since  2.2.6
     *
     * @return void
     */
    public function maybe_register_message()
    {
    }
    /**
     * Display options-page output. To override, set 'display_cb' box property.
     *
     * @since  2.2.5
     */
    public function options_page_output()
    {
    }
    /**
     * Display options-page Tab Navigation output.
     *
     * @since 2.9.0
     */
    public function options_page_tab_nav_output()
    {
    }
    /**
     * Outputs the settings notices if a) not a sub-page of 'options-general.php'
     * (because settings_errors() already called in wp-admin/options-head.php),
     * and b) the 'disable_settings_errors' prop is not set or truthy.
     *
     * @since  2.2.5
     * @return void
     */
    public function maybe_output_settings_notices()
    {
    }
    /**
     * Gets navigation tabs array for CMB2 options pages which share the
     * same tab_group property.
     *
     * @since 2.4.0
     * @return array Array of tab information ($option_key => $tab_title)
     */
    public function get_tab_group_tabs()
    {
    }
    /**
     * Display metaboxes for an options-page object.
     *
     * @since  2.2.5
     */
    public function options_page_metabox()
    {
    }
    /**
     * Save data from options page, then redirects back.
     *
     * @since  2.2.5
     * @return void
     */
    public function save_options()
    {
    }
    /**
     * Replaces get_option with get_site_option.
     *
     * @since 2.2.5
     *
     * @param mixed $test    Not used.
     * @param mixed $default Default value to use.
     * @return mixed Value set for the network option.
     */
    public function network_get_override($test, $default = \false)
    {
    }
    /**
     * Replaces update_option with update_site_option.
     *
     * @since 2.2.5
     *
     * @param mixed $test         Not used.
     * @param mixed $option_value Value to use.
     * @return bool Success/Failure
     */
    public function network_update_override($test, $option_value)
    {
    }
    /**
     * Determines if given page slug matches the 'page' GET query variable.
     *
     * @since  2.4.0
     *
     * @param  string $page Page slug.
     * @return boolean
     */
    public static function is_page($page)
    {
    }
    /**
     * Magic getter for our object.
     *
     * @param string $field Property to retrieve.
     *
     * @throws Exception Throws an exception if the field is invalid.
     * @return mixed
     */
    public function __get($field)
    {
    }
}
/**
 * CMB2 field sanitization
 *
 * @since  0.0.4
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @method string _id()
 */
class CMB2_Sanitize
{
    /**
     * A CMB field object
     *
     * @var CMB2_Field object
     */
    public $field;
    /**
     * Field's value
     *
     * @var mixed
     */
    public $value;
    /**
     * Setup our class vars
     *
     * @since 1.1.0
     * @param CMB2_Field $field A CMB2 field object.
     * @param mixed      $value Field value.
     */
    public function __construct(\CMB2_Field $field, $value)
    {
    }
    /**
     * Catchall method if field's 'sanitization_cb' is NOT defined,
     * or field type does not have a corresponding validation method.
     *
     * @since  1.0.0
     *
     * @param  string $name      Non-existent method name.
     * @param  array  $arguments All arguments passed to the method.
     * @return mixed
     */
    public function __call($name, $arguments)
    {
    }
    /**
     * Default fallback sanitization method. Applies filters.
     *
     * @since  1.0.2
     */
    public function default_sanitization()
    {
    }
    /**
     * Default sanitization method, sanitize_text_field. Checks if value is array.
     *
     * @since  2.2.4
     * @return mixed  Sanitized value.
     */
    protected function _default_sanitization()
    {
    }
    /**
     * Sanitize a taxonomy value for a numeric id vs slug.
     *
     * @param array<int|string>|int|string|null $value
     *
     * @return array<int|string>|int|string
     */
    protected function sanitize_taxonomy_value($value)
    {
    }
    /**
     * Sets the object terms to the object (if not options-page) and optionally returns the sanitized term values.
     *
     * @since  2.2.4
     * @return mixed  Blank value, or sanitized term values if "cmb2_return_taxonomy_values_{$cmb_id}" is true.
     */
    public function taxonomy()
    {
    }
    /**
     * Simple checkbox validation
     *
     * @since  1.0.1
     * @return string|false 'on' or false
     */
    public function checkbox()
    {
    }
    /**
     * Validate url in a meta value.
     *
     * @since  1.0.1
     * @return string        Empty string or escaped url
     */
    public function text_url()
    {
    }
    public function colorpicker()
    {
    }
    /**
     * Validate email in a meta value
     *
     * @since  1.0.1
     * @return string       Empty string or sanitized email
     */
    public function text_email()
    {
    }
    /**
     * Validate money in a meta value
     *
     * @since  1.0.1
     * @return string Empty string or sanitized money value
     */
    public function text_money()
    {
    }
    /**
     * Converts text date to timestamp
     *
     * @since  1.0.2
     * @return string Timestring
     */
    public function text_date_timestamp()
    {
    }
    /**
     * Datetime to timestamp
     *
     * @since  1.0.1
     *
     * @param bool $repeat Whether or not to repeat.
     * @return string|array Timestring
     */
    public function text_datetime_timestamp($repeat = \false)
    {
    }
    /**
     * Datetime to timestamp with timezone
     *
     * @since  1.0.1
     *
     * @param bool $repeat Whether or not to repeat.
     * @return string       Timestring
     */
    public function text_datetime_timestamp_timezone($repeat = \false)
    {
    }
    /**
     * Sanitize textareas and wysiwyg fields
     *
     * @since  1.0.1
     * @return string       Sanitized data
     */
    public function textarea()
    {
    }
    /**
     * Sanitize code textareas
     *
     * @since  1.0.2
     *
     * @param bool $repeat Whether or not to repeat.
     * @return string       Sanitized data
     */
    public function textarea_code($repeat = \false)
    {
    }
    /**
     * Handles saving of attachment post ID and sanitizing file url
     *
     * @since  1.1.0
     * @return string        Sanitized url
     */
    public function file()
    {
    }
    /**
     * Gets the values for the `file` field type from the data being saved.
     *
     * @since  2.2.0
     *
     * @param mixed $id_key ID key to use.
     * @return array
     */
    public function _get_group_file_value_array($id_key)
    {
    }
    /**
     * Peforms saving of `file` attachement's ID
     *
     * @since  1.1.0
     *
     * @param mixed $file_id_key ID key to use.
     * @return mixed
     */
    public function _save_file_id_value($file_id_key)
    {
    }
    /**
     * Peforms saving of `text_datetime_timestamp_timezone` utc timestamp
     *
     * @since  2.2.0
     *
     * @param mixed $utc_key   UTC key.
     * @param mixed $utc_stamp UTC timestamp.
     * @return mixed
     */
    public function _save_utc_value($utc_key, $utc_stamp)
    {
    }
    /**
     * Returns a new, supporting, CMB2_Field object based on a new field id.
     *
     * @since  2.2.0
     *
     * @param mixed $new_field_id New field ID.
     * @return CMB2_Field
     */
    public function _new_supporting_field($new_field_id)
    {
    }
    /**
     * If repeating, loop through and re-apply sanitization method
     *
     * @since  1.1.0
     * @param  string $method Class method.
     * @param  bool   $repeat Whether repeating or not.
     * @return mixed          Sanitized value
     */
    public function _check_repeat($method, $repeat)
    {
    }
    /**
     * Determine if passed value is an empty array
     *
     * @since  2.0.6
     * @param  mixed $to_check Value to check.
     * @return boolean         Whether value is an array that's empty
     */
    public function _is_empty_array($to_check)
    {
    }
    /**
     * Sanitize a URL. Make the default scheme HTTPS.
     *
     * @since  2.10.0
     * @param  string  $value     Unescaped URL.
     * @param  array   $protocols Allowed protocols for URL.
     * @param  string  $default   Default value if no URL found.
     * @return string             escaped URL.
     */
    public static function sanitize_and_secure_url($url, $protocols = \null, $default = \null)
    {
    }
    /**
     * Check if the current field's value is empty.
     *
     * @since  2.9.1
     *
     * @return boolean Wether value is empty.
     */
    public function is_empty_value()
    {
    }
    /**
     * Check if the current field's value is a valid date value.
     *
     * @since  2.9.1
     *
     * @return boolean Wether value is a valid date value.
     */
    public function is_valid_date_value()
    {
    }
}
/**
 * Show On Filters
 * Use the 'cmb2_show_on' filter to further refine the conditions
 * under which a metabox is displayed.
 * Below you can limit it by ID and page template
 *
 * All methods in this class are automatically filtered
 *
 * @since  1.0.0
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Show_Filters
{
    /**
     * Get Show_on key. backwards compatible w/ 'key' indexes
     *
     * @since  2.0.0
     *
     * @param  array $meta_box_args Metabox config array.
     *
     * @return mixed                show_on key or false
     */
    private static function get_show_on_key($meta_box_args)
    {
    }
    /**
     * Get Show_on value. backwards compatible w/ 'value' indexes
     *
     * @since  2.0.0
     *
     * @param  array $meta_box_args Metabox config array.
     *
     * @return mixed                show_on value or false
     */
    private static function get_show_on_value($meta_box_args)
    {
    }
    /**
     * Add metaboxes for an specific ID
     *
     * @since  1.0.0
     * @param  bool  $display       To display or not.
     * @param  array $meta_box_args Metabox config array.
     * @param  CMB2  $cmb           The CMB2 instance.
     * @return bool                 Whether to display this metabox on the current page.
     */
    public static function check_id($display, $meta_box_args, $cmb)
    {
    }
    /**
     * Add metaboxes for an specific Page Template
     *
     * @since  1.0.0
     * @param  bool  $display       To display or not.
     * @param  array $meta_box_args Metabox config array.
     * @param  CMB2  $cmb           CMB2 object.
     * @return bool            Whether to display this metabox on the current page.
     */
    public static function check_page_template($display, $meta_box_args, $cmb)
    {
    }
    /**
     * Only show options-page metaboxes on their options page (but only enforce on the admin side)
     *
     * @since  1.0.0
     * @param  bool  $display  To display or not.
     * @param  array $meta_box_args Metabox config array.
     * @return bool            Whether to display this metabox on the current page.
     */
    public static function check_admin_page($display, $meta_box_args)
    {
    }
}
/**
 * CMB field type objects
 *
 * @since  1.0.0
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Types
{
    /**
     * An iterator value for repeatable fields
     *
     * @var   integer
     * @since 1.0.0
     */
    public $iterator = 0;
    /**
     * Current CMB2_Field field object
     *
     * @var   CMB2_Field object
     * @since 1.0.0
     */
    public $field;
    /**
     * Current CMB2_Type_Base object
     *
     * @var   CMB2_Type_Base object
     * @since 2.2.2
     */
    public $type = \null;
    public function __construct(\CMB2_Field $field)
    {
    }
    /**
     * Default fallback. Allows rendering fields via "cmb2_render_$fieldtype" hook
     *
     * @since 1.0.0
     * @param string $fieldtype Non-existent field type name
     * @param array  $arguments All arguments passed to the method
     */
    public function __call($fieldtype, $arguments)
    {
    }
    /**
     * Render a field (and handle repeatable)
     *
     * @since  1.1.0
     */
    public function render()
    {
    }
    /**
     * Render a field type
     *
     * @since  1.1.0
     */
    protected function _render()
    {
    }
    /**
     * Proxies the method call to the CMB2_Type_Base object, if it exists, otherwise returns a default fallback value.
     *
     * @since  2.2.2
     *
     * @param  string $method  Method to call on the CMB2_Type_Base object.
     * @param  mixed  $default Default fallback value if method is not found.
     * @param  array  $args    Optional arguments to pass to proxy method.
     *
     * @return mixed           Results from called method.
     */
    protected function proxy_method($method, $default, $args = array())
    {
    }
    /**
     * If no CMB2_Types::$type object is initiated when a proxy method is called, it means
     * it's a custom field type (which SHOULD be instantiating a Type), but let's try and
     * guess the type object for them and instantiate it.
     *
     * @since  2.2.3
     *
     * @param string $method  Method attempting to be called on the CMB2_Type_Base object.
     * @return bool
     */
    protected function guess_type_object($method)
    {
    }
    /**
     * Check for methods to be proxied to the CMB2_Type_Base object.
     *
     * @since  2.2.4
     * @param  string $method    The possible method to proxy.
     * @param  array  $arguments All arguments passed to the method.
     * @return bool|array        False if not proxied, else array with 'value' key being the return of the method.
     */
    public function maybe_proxy_method($method, $arguments)
    {
    }
    /**
     * Checks for a custom field CMB2_Type_Base class to use for rendering.
     *
     * @since 2.2.4
     *
     * @param string $fieldtype Non-existent field type name.
     * @param array  $args      Optional field arguments.
     *
     * @return bool|CMB2_Type_Base Type object if custom field is an object, false if field was added with
     *                             `cmb2_render_{$field_type}` action.
     * @throws Exception if custom field type class does not extend CMB2_Type_Base.
     */
    public function maybe_custom_field_object($fieldtype, $args = array())
    {
    }
    /**
     * Gets the render type CMB2_Type_Base object to use for rendering the field.
     *
     * @since  2.2.4
     * @param  string $fieldtype         The type of field being rendered.
     * @param  string $render_class_name The default field type class to use. Defaults to null.
     * @param  array  $args              Optional arguments to pass to type class.
     * @param  mixed  $additional        Optional additional argument to pass to type class.
     * @return CMB2_Type_Base            Type object.
     */
    public function get_new_render_type($fieldtype, $render_class_name = \null, $args = array(), $additional = '')
    {
    }
    /**
     * Checks for the render type class to use for rendering the field.
     *
     * @since  2.2.4
     * @param  string $fieldtype         The type of field being rendered.
     * @param  string $render_class_name The default field type class to use. Defaults to null.
     * @return string                    The field type class to use.
     */
    public function get_render_type_class($fieldtype, $render_class_name = \null)
    {
    }
    /**
     * Retrieve text parameter from field's options array (if it has one), or use fallback text
     *
     * @since 2.0.0
     * @param  string $text_key Key in field's options array.
     * @param  string $fallback Fallback text.
     * @return string
     */
    public function _text($text_key, $fallback = '')
    {
    }
    /**
     * Determine a file's extension
     *
     * @since  1.0.0
     * @param  string $file File url
     * @return string|false File extension or false
     */
    public function get_file_ext($file)
    {
    }
    /**
     * Get the file name from a url
     *
     * @since  2.0.0
     * @param  string $value File url or path
     * @return string        File name
     */
    public function get_file_name_from_path($value)
    {
    }
    /**
     * Combines attributes into a string for a form element
     *
     * @since  1.1.0
     * @param  array $attrs        Attributes to concatenate
     * @param  array $attr_exclude Attributes that should NOT be concatenated
     * @return string               String of attributes for form element
     */
    public function concat_attrs($attrs, $attr_exclude = array())
    {
    }
    /**
     * Generates repeatable field table markup
     *
     * @since  1.0.0
     */
    public function render_repeatable_field()
    {
    }
    /**
     * Generates repeatable field rows
     *
     * @since  1.1.0
     */
    public function repeatable_rows()
    {
    }
    /**
     * Generates a repeatable row's markup
     *
     * @since 1.1.0
     * @param string $classes Repeatable table row's class
     */
    protected function repeat_row($classes = 'cmb-repeat-row')
    {
    }
    /**
     * Generates description markup.
     *
     * @since 1.0.0
     * @param bool $paragraph    Paragraph tag or span.
     * @param bool $echo         Whether to echo description or only return it.
     * @param bool $repeat_group Whether to repeat the group.
     * @return string Field's description markup.
     */
    public function _desc($paragraph = \false, $echo = \false, $repeat_group = \false)
    {
    }
    /**
     * Generate field name attribute
     *
     * @since  1.1.0
     * @param  string $suffix For multi-part fields
     * @return string          Name attribute
     */
    public function _name($suffix = '')
    {
    }
    /**
     * Generate field id attribute
     *
     * @since  1.1.0
     * @param  string $suffix                     For multi-part fields
     * @param  bool   $append_repeatable_iterator Whether to append the iterator attribue if the field is repeatable.
     * @return string                             Id attribute
     */
    public function _id($suffix = '', $append_repeatable_iterator = \true)
    {
    }
    /**
     * Handles outputting an 'input' element
     *
     * @since  1.1.0
     * @param  array  $args Override arguments
     * @param  string $type Field type
     * @return string       Form input element
     */
    public function input($args = array(), $type = __FUNCTION__)
    {
    }
    /**
     * Handles outputting an 'textarea' element
     *
     * @since  1.1.0
     * @param  array $args Override arguments
     * @return string       Form textarea element
     */
    public function textarea($args = array())
    {
    }
    /**
     * Begin Field Types
     */
    public function text()
    {
    }
    public function hidden()
    {
    }
    public function text_small()
    {
    }
    public function text_medium()
    {
    }
    public function text_email()
    {
    }
    public function text_url()
    {
    }
    public function text_money()
    {
    }
    public function textarea_small()
    {
    }
    public function textarea_code($args = array())
    {
    }
    public function wysiwyg($args = array())
    {
    }
    public function text_date($args = array())
    {
    }
    // Alias for text_date
    public function text_date_timestamp($args = array())
    {
    }
    public function text_time($args = array())
    {
    }
    public function text_datetime_timestamp($args = array())
    {
    }
    public function text_datetime_timestamp_timezone($args = array())
    {
    }
    public function select_timezone($args = array())
    {
    }
    public function colorpicker($args = array(), $meta_value = '')
    {
    }
    public function title($args = array())
    {
    }
    public function select($args = array())
    {
    }
    public function taxonomy_select($args = array())
    {
    }
    public function taxonomy_select_hierarchical($args = array())
    {
    }
    public function radio($args = array(), $type = __FUNCTION__)
    {
    }
    public function radio_inline($args = array())
    {
    }
    public function multicheck($type = 'checkbox')
    {
    }
    public function multicheck_inline()
    {
    }
    public function checkbox($args = array(), $is_checked = \null)
    {
    }
    public function taxonomy_radio($args = array())
    {
    }
    public function taxonomy_radio_hierarchical($args = array())
    {
    }
    public function taxonomy_radio_inline($args = array())
    {
    }
    public function taxonomy_multicheck($args = array())
    {
    }
    public function taxonomy_multicheck_hierarchical($args = array())
    {
    }
    public function taxonomy_multicheck_inline($args = array())
    {
    }
    public function oembed($args = array())
    {
    }
    public function file_list($args = array())
    {
    }
    public function file($args = array())
    {
    }
}
/**
 * CMB2 Utilities
 *
 * @since  1.1.0
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Utils
{
    /**
     * The WordPress ABSPATH constant.
     *
     * @var   string
     * @since 2.2.3
     */
    protected static $ABSPATH = \ABSPATH;
    /**
     * The url which is used to load local resources.
     *
     * @var   string
     * @since 2.0.0
     */
    protected static $url = '';
    /**
     * Utility method that attempts to get an attachment's ID by it's url
     *
     * @since  1.0.0
     * @param  string $img_url Attachment url.
     * @return int|false            Attachment ID or false
     */
    public static function image_id_from_url($img_url)
    {
    }
    /**
     * Utility method to get a combined list of default and custom registered image sizes
     *
     * @since  2.2.4
     * @link   http://core.trac.wordpress.org/ticket/18947
     * @global array $_wp_additional_image_sizes
     * @return array The image sizes
     */
    public static function get_available_image_sizes()
    {
    }
    /**
     * Utility method to return the closest named size from an array of values
     *
     * Based off of WordPress's image_get_intermediate_size()
     * If the size matches an existing size then it will be used. If there is no
     * direct match, then the nearest image size larger than the specified size
     * will be used. If nothing is found, then the function will return false.
     * Uses get_available_image_sizes() to get all available sizes.
     *
     * @since  2.2.4
     * @param  array|string $size Image size. Accepts an array of width and height (in that order).
     * @return false|string       Named image size e.g. 'thumbnail'
     */
    public static function get_named_size($size)
    {
    }
    /**
     * Utility method that returns time string offset by timezone
     *
     * @since  1.0.0
     * @param  string $tzstring Time string.
     * @return string           Offset time string
     */
    public static function timezone_offset($tzstring)
    {
    }
    /**
     * Utility method that returns a timezone string representing the default timezone for the site.
     *
     * Roughly copied from WordPress, as get_option('timezone_string') will return
     * an empty string if no value has been set on the options page.
     * A timezone string is required by the wp_timezone_choice() used by the
     * select_timezone field.
     *
     * @since  1.0.0
     * @return string Timezone string
     */
    public static function timezone_string()
    {
    }
    /**
     * Returns a unix timestamp, first checking if value already is a timestamp.
     *
     * @since  2.0.0
     * @param  string|int $string Possible timestamp string.
     * @return int Time stamp.
     */
    public static function make_valid_time_stamp($string)
    {
    }
    /**
     * Determine if a value is a valid date.
     *
     * @since  2.9.1
     * @param  mixed $date Value to check.
     * @return boolean     Whether value is a valid date
     */
    public static function is_valid_date($date)
    {
    }
    /**
     * Determine if a value is a valid timestamp
     *
     * @since  2.0.0
     * @param  mixed $timestamp Value to check.
     * @return boolean           Whether value is a valid timestamp
     */
    public static function is_valid_time_stamp($timestamp)
    {
    }
    /**
     * Checks if a value is 'empty'. Still accepts 0.
     *
     * @since  2.0.0
     * @param  mixed $value Value to check.
     * @return bool         True or false
     */
    public static function isempty($value)
    {
    }
    /**
     * Checks if a value is not 'empty'. 0 doesn't count as empty.
     *
     * @since  2.2.2
     * @param  mixed $value Value to check.
     * @return bool         True or false
     */
    public static function notempty($value)
    {
    }
    /**
     * Filters out empty values (not including 0).
     *
     * @since  2.2.2
     * @param  mixed $value Value to check.
     * @return array True or false.
     */
    public static function filter_empty($value)
    {
    }
    /**
     * Insert a single array item inside another array at a set position
     *
     * @since  2.0.2
     * @param  array $array    Array to modify. Is passed by reference, and no return is needed. Passed by reference.
     * @param  array $new      New array to insert.
     * @param  int   $position Position in the main array to insert the new array.
     */
    public static function array_insert(&$array, $new, $position)
    {
    }
    /**
     * Defines the url which is used to load local resources.
     * This may need to be filtered for local Window installations.
     * If resources do not load, please check the wiki for details.
     *
     * @since  1.0.1
     *
     * @param string $path URL path.
     * @return string URL to CMB2 resources
     */
    public static function url($path = '')
    {
    }
    /**
     * Converts a system path to a URL
     *
     * @since  2.2.2
     * @param  string $dir Directory path to convert.
     * @return string      Converted URL.
     */
    public static function get_url_from_dir($dir)
    {
    }
    /**
     * Get the normalized absolute path defined by WordPress.
     *
     * @since  2.2.6
     *
     * @return string  Normalized absolute path.
     */
    protected static function get_normalized_abspath()
    {
    }
    /**
     * `wp_normalize_path` wrapper for back-compat. Normalize a filesystem path.
     *
     * On windows systems, replaces backslashes with forward slashes
     * and forces upper-case drive letters.
     * Allows for two leading slashes for Windows network shares, but
     * ensures that all other duplicate slashes are reduced to a single.
     *
     * @since 2.2.0
     *
     * @param string $path Path to normalize.
     * @return string Normalized path.
     */
    protected static function normalize_path($path)
    {
    }
    /**
     * Get timestamp from text date
     *
     * @param string $value Date value.
     *
     * @since  2.2.0
     * @return int        Unix timestamp representing the date.
     */
    public static function get_timestamp_from_value($value, $date_format, $timezone = \null)
    {
    }
    /**
     * Takes a php date() format string and returns a string formatted to suit for the date/time pickers
     * It will work only with the following subset of date() options:
     *
     * Formats: d, l, j, z, m, F, n, y, and Y.
     *
     * A slight effort is made to deal with escaped characters.
     *
     * Other options are ignored, because they would either bring compatibility problems between PHP and JS, or
     * bring even more translation troubles.
     *
     * @since 2.2.0
     * @param string $format PHP date format.
     * @return string reformatted string
     */
    public static function php_to_js_dateformat($format)
    {
    }
    /**
     * Helper function for CMB_Utils::php_to_js_dateformat().
     *
     * @since  2.2.0
     * @param  string $value Value to wrap/escape.
     * @return string Modified value
     */
    public static function wrap_escaped_chars($value)
    {
    }
    /**
     * Send to debug.log if WP_DEBUG is defined and true
     *
     * @since  2.2.0
     *
     * @param  string $function Function name.
     * @param  int    $line     Line number.
     * @param  mixed  $msg      Message to output.
     * @param  mixed  $debug    Variable to print_r.
     */
    public static function log_if_debug($function, $line, $msg, $debug = \null)
    {
    }
    /**
     * Determine a file's extension
     *
     * @since  1.0.0
     * @param  string $file File url.
     * @return string|false       File extension or false
     */
    public static function get_file_ext($file)
    {
    }
    /**
     * Get the file name from a url
     *
     * @since  2.0.0
     * @param  string $value File url or path.
     * @return string        File name
     */
    public static function get_file_name_from_path($value)
    {
    }
    /**
     * Check if WP version is at least $version.
     *
     * @since  2.2.2
     * @param  string $version WP version string to compare.
     * @return bool            Result of comparison check.
     */
    public static function wp_at_least($version)
    {
    }
    /**
     * Combines attributes into a string for a form element.
     *
     * @since  1.1.0
     * @param  array $attrs        Attributes to concatenate.
     * @param  array $attr_exclude Attributes that should NOT be concatenated.
     * @return string              String of attributes for form element.
     */
    public static function concat_attrs($attrs, $attr_exclude = array())
    {
    }
    /**
     * Check if given attribute is a data attribute.
     *
     * @since  2.2.5
     *
     * @param string $att HTML attribute.
     * @return boolean
     */
    public static function is_data_attribute($att)
    {
    }
    /**
     * Ensures value is an array.
     *
     * @since  2.2.3
     *
     * @param  mixed $value   Value to ensure is array.
     * @param  array $default Default array. Defaults to empty array.
     *
     * @return array          The array.
     */
    public static function ensure_array($value, $default = array())
    {
    }
    /**
     * If number is numeric, normalize it with floatval or intval, depending on if decimal is found.
     *
     * @since  2.2.6
     *
     * @param mixed $value Value to normalize (if numeric).
     * @return mixed         Possibly normalized value.
     */
    public static function normalize_if_numeric($value)
    {
    }
    /**
     * Generates a 12 character unique hash from a string.
     *
     * @since  2.4.0
     *
     * @param string $string String to create a hash from.
     *
     * @return string
     */
    public static function generate_hash($string)
    {
    }
}
/**
 * Handles hooking CMB2 objects/fields into the WordPres REST API
 * which can allow fields to be read and/or updated.
 *
 * @since  2.2.3
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @property-read array $read_fields Array of readable field objects.
 * @property-read array $edit_fields Array of editable field objects.
 * @property-read bool rest_read   Whether CMB2 object is readable via the rest api.
 * @property-read bool rest_edit   Whether CMB2 object is editable via the rest api.
 */
class CMB2_REST extends \CMB2_Hookup_Base
{
    /**
     * The current CMB2 REST endpoint version
     *
     * @var string
     * @since 2.2.3
     */
    const VERSION = '1';
    /**
     * The CMB2 REST base namespace (v should always be followed by $version)
     *
     * @var string
     * @since 2.2.3
     */
    const NAME_SPACE = 'cmb2/v1';
    /**
     * @var   CMB2 object
     * @since 2.2.3
     */
    public $cmb;
    /**
     * @var   CMB2_REST[] objects
     * @since 2.2.3
     */
    protected static $boxes = array();
    /**
     * @var   array Array of cmb ids for each type.
     * @since 2.2.3
     */
    protected static $type_boxes = array('post' => array(), 'user' => array(), 'comment' => array(), 'term' => array());
    /**
     * Array of readable field objects.
     *
     * @var   CMB2_Field[]
     * @since 2.2.3
     */
    protected $read_fields = array();
    /**
     * Array of editable field objects.
     *
     * @var   string[]
     * @since 2.2.3
     */
    protected $edit_fields = array();
    /**
     * Whether CMB2 object is readable via the rest api.
     *
     * @var boolean
     */
    protected $rest_read = \false;
    /**
     * Whether CMB2 object is editable via the rest api.
     *
     * @var boolean
     */
    protected $rest_edit = \false;
    /**
     * A functionalized constructor, used for the hookup action callbacks.
     *
     * @since  2.2.6
     *
     * @param  CMB2 $cmb The CMB2 object to hookup
     *
     * @return CMB2_Hookup_Base|false $hookup The hookup object.
     */
    public static function maybe_init_and_hookup(\CMB2 $cmb)
    {
    }
    /**
     * Constructor
     *
     * @since 2.2.3
     *
     * @param CMB2 $cmb The CMB2 object to be registered for the API.
     */
    public function __construct(\CMB2 $cmb)
    {
    }
    /**
     * Hooks to register on frontend and backend.
     *
     * @since  2.2.3
     *
     * @return CMB2_REST
     */
    public function universal_hooks()
    {
    }
    /**
     * Initiate the CMB2 Boxes and Fields routes
     *
     * @since  2.2.3
     *
     * @return void
     */
    public static function init_routes()
    {
    }
    /**
     * Loop through REST boxes and call register_rest_field for each object type.
     *
     * @since  2.2.3
     *
     * @return void
     */
    public static function register_cmb2_fields()
    {
    }
    /**
     * Wrapper for register_rest_field.
     *
     * @since  2.2.3
     *
     * @param string|array $object_types Object(s) the field is being registered
     *                                   to, "post"|"term"|"comment" etc.
     * @param string       $object_types       Canonical object type for callbacks.
     *
     * @return void
     */
    protected static function register_rest_field($object_types, $object_type)
    {
    }
    /**
     * Setup readable and editable fields.
     *
     * @since  2.2.3
     *
     * @return void
     */
    protected function declare_read_edit_fields()
    {
    }
    /**
     * Determines if a field is readable based on it's show_in_rest value
     * and the box's show_in_rest value.
     *
     * @since  2.2.3
     *
     * @param  bool $show_in_rest Field's show_in_rest value. Default null.
     *
     * @return bool               Whether field is readable.
     */
    protected function can_read($show_in_rest)
    {
    }
    /**
     * Determines if a field is editable based on it's show_in_rest value
     * and the box's show_in_rest value.
     *
     * @since  2.2.3
     *
     * @param  bool $show_in_rest Field's show_in_rest value. Default null.
     *
     * @return bool               Whether field is editable.
     */
    protected function can_edit($show_in_rest)
    {
    }
    /**
     * Handler for getting post custom field data.
     *
     * @since  2.2.3
     *
     * @param  array           $object      The object data from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return mixed
     */
    public static function get_post_rest_values($object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for getting user custom field data.
     *
     * @since  2.2.3
     *
     * @param  array           $object      The object data from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return mixed
     */
    public static function get_user_rest_values($object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for getting comment custom field data.
     *
     * @since  2.2.3
     *
     * @param  array           $object      The object data from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return mixed
     */
    public static function get_comment_rest_values($object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for getting term custom field data.
     *
     * @since  2.2.3
     *
     * @param  array           $object      The object data from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return mixed
     */
    public static function get_term_rest_values($object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for getting custom field data.
     *
     * @since  2.2.3
     *
     * @param  array           $object           The object data from the response
     * @param  WP_REST_Request $request          Current request
     * @param  string          $object_type      The request object type
     * @param  string          $main_object_type The cmb main object type
     *
     * @return mixed
     */
    protected static function get_rest_values($object, $request, $object_type, $main_object_type = 'post')
    {
    }
    /**
     * Get box rest values.
     *
     * @since  2.7.0
     *
     * @param  CMB2_REST $rest_box         The CMB2_REST object.
     * @param  integer   $object_id        The object ID.
     * @param  string    $main_object_type The object type (post, user, term, etc)
     *
     * @return array                       Array of box rest values.
     */
    public static function get_box_rest_values($rest_box, $object_id = 0, $main_object_type = 'post')
    {
    }
    /**
     * Handler for updating post custom field data.
     *
     * @since  2.2.3
     *
     * @param  mixed           $values      The value of the field
     * @param  object          $object      The object from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return bool|int
     */
    public static function update_post_rest_values($values, $object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for updating user custom field data.
     *
     * @since  2.2.3
     *
     * @param  mixed           $values      The value of the field
     * @param  object          $object      The object from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return bool|int
     */
    public static function update_user_rest_values($values, $object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for updating comment custom field data.
     *
     * @since  2.2.3
     *
     * @param  mixed           $values      The value of the field
     * @param  object          $object      The object from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return bool|int
     */
    public static function update_comment_rest_values($values, $object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for updating term custom field data.
     *
     * @since  2.2.3
     *
     * @param  mixed           $values      The value of the field
     * @param  object          $object      The object from the response
     * @param  string          $field_name  Name of field
     * @param  WP_REST_Request $request     Current request
     * @param  string          $object_type The request object type
     *
     * @return bool|int
     */
    public static function update_term_rest_values($values, $object, $field_name, $request, $object_type)
    {
    }
    /**
     * Handler for updating custom field data.
     *
     * @since  2.2.3
     *
     * @param  mixed           $values           The value of the field
     * @param  object          $object           The object from the response
     * @param  WP_REST_Request $request          Current request
     * @param  string          $object_type      The request object type
     * @param  string          $main_object_type The cmb main object type
     *
     * @return bool|array
     */
    protected static function update_rest_values($values, $object, $request, $object_type, $main_object_type = 'post')
    {
    }
    /**
     * Updates box rest values.
     *
     * @since  2.7.0
     *
     * @param  array     $values           Array of values.
     * @param  CMB2_REST $rest_box         The CMB2_REST object.
     * @param  integer   $object_id        The object ID.
     * @param  string    $main_object_type The object type (post, user, term, etc)
     *
     * @return mixed|bool                  Array of updated statuses if successful.
     */
    public static function santize_box_rest_values($values, $rest_box, $object_id = 0, $main_object_type = 'post')
    {
    }
    /**
     * Loop through box fields and sanitize the values.
     *
     * @since  2.2.o
     *
     * @param  array $values Array of values being provided.
     * @return array           Array of updated/sanitized values.
     */
    public function sanitize_box_values(array $values)
    {
    }
    /**
     * Handles returning a sanitized field value.
     *
     * @since  2.2.3
     *
     * @param  array  $values   Array of values being provided.
     * @param  string $field_id The id of the field to update.
     *
     * @return mixed             The results of saving/sanitizing a field value.
     */
    protected function sanitize_field_value(array $values, $field_id)
    {
    }
    /**
     * Handles returning a sanitized group field value.
     *
     * @since  2.2.3
     *
     * @param  array      $values Array of values being provided.
     * @param  CMB2_Field $field  CMB2_Field object.
     *
     * @return mixed               The results of saving/sanitizing the group field value.
     */
    protected function sanitize_group_value(array $values, \CMB2_Field $field)
    {
    }
    /**
     * Filter whether a meta key is protected.
     *
     * @since 2.2.3
     *
     * @param bool   $protected Whether the key is protected. Default false.
     * @param string $meta_key  Meta key.
     * @param string $meta_type Meta type.
     */
    public function is_protected_meta($protected, $meta_key, $meta_type)
    {
    }
    /**
     * Get the object ID for the given object/type.
     *
     * @since  2.2.3
     *
     * @param  mixed  $object      The object to get the ID for.
     * @param  string $object_type The object type we are looking for.
     *
     * @return int                 The object ID if found.
     */
    public static function get_object_id($object, $object_type = 'post')
    {
    }
    /**
     * Checks if a given field can be read.
     *
     * @since  2.2.3
     *
     * @param  string|CMB2_Field $field_id      Field ID or CMB2_Field object.
     * @param  boolean           $return_object Whether to return the Field object.
     *
     * @return mixed                            False if field can't be read or true|CMB2_Field object.
     */
    public function field_can_read($field_id, $return_object = \false)
    {
    }
    /**
     * Checks if a given field can be edited.
     *
     * @since  2.2.3
     *
     * @param  string|CMB2_Field $field_id      Field ID or CMB2_Field object.
     * @param  boolean           $return_object Whether to return the Field object.
     *
     * @return mixed                            False if field can't be edited or true|CMB2_Field object.
     */
    public function field_can_edit($field_id, $return_object = \false)
    {
    }
    /**
     * Checks if a given field can be read or edited.
     *
     * @since  2.2.3
     *
     * @param  string            $type          Whether we are checking for read or edit fields.
     * @param  string|CMB2_Field $field_id      Field ID or CMB2_Field object.
     * @param  boolean           $return_object Whether to return the Field object.
     *
     * @return mixed                            False if field can't be read or edited or true|CMB2_Field object.
     */
    protected function field_can($type, $field_id, $return_object = \false)
    {
    }
    /**
     * Get a CMB2_REST instance object from the registry by a CMB2 id.
     *
     * @since  2.2.3
     *
     * @param  string $cmb_id CMB2 config id
     *
     * @return CMB2_REST|false The CMB2_REST object or false.
     */
    public static function get_rest_box($cmb_id)
    {
    }
    /**
     * Remove a CMB2_REST instance object from the registry.
     *
     * @since  2.2.3
     *
     * @param string $cmb_id A CMB2 instance id.
     */
    public static function remove($cmb_id)
    {
    }
    /**
     * Retrieve all CMB2_REST instances from the registry.
     *
     * @since  2.2.3
     * @return CMB2_REST[] Array of all registered CMB2_REST instances.
     */
    public static function get_all()
    {
    }
    /**
     * Checks if given value is readable.
     *
     * Value is considered readable if it is not empty and if it does not match the editable blacklist.
     *
     * @since  2.2.3
     *
     * @param  mixed $value Value to check.
     *
     * @return boolean       Whether value is considered readable.
     */
    public static function is_readable($value)
    {
    }
    /**
     * Checks if given value is editable.
     *
     * Value is considered editable if matches the editable whitelist.
     *
     * @since  2.2.3
     *
     * @param  mixed $value Value to check.
     *
     * @return boolean       Whether value is considered editable.
     */
    public static function is_editable($value)
    {
    }
    /**
     * Magic getter for our object.
     *
     * @param string $field
     * @throws Exception Throws an exception if the field is invalid.
     *
     * @return mixed
     */
    public function __get($field)
    {
    }
}
/**
 * Creates CMB2 objects/fields endpoint for WordPres REST API.
 * Allows access to fields registered to a specific post type and more.
 *
 * @todo  Add better documentation.
 * @todo  Research proper schema.
 *
 * @since 2.2.3
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
abstract class CMB2_REST_Controller extends \WP_REST_Controller
{
    /**
     * The namespace of this controller's route.
     *
     * @var string
     */
    protected $namespace = \CMB2_REST::NAME_SPACE;
    /**
     * The base of this controller's route.
     *
     * @var string
     */
    protected $rest_base;
    /**
     * The current request object
     *
     * @var WP_REST_Request $request
     * @since 2.2.3
     */
    public $request;
    /**
     * The current server object
     *
     * @var WP_REST_Server $server
     * @since 2.2.3
     */
    public $server;
    /**
     * Box object id
     *
     * @var   mixed
     * @since 2.2.3
     */
    public $object_id = \null;
    /**
     * Box object type
     *
     * @var   string
     * @since 2.2.3
     */
    public $object_type = '';
    /**
     * CMB2 Instance
     *
     * @var CMB2_REST
     */
    protected $rest_box;
    /**
     * CMB2_Field Instance
     *
     * @var CMB2_Field
     */
    protected $field;
    /**
     * The initial route
     *
     * @var   string
     * @since 2.2.3
     */
    protected static $route = '';
    /**
     * Defines which endpoint the initial request is.
     *
     * @var string $request_type
     * @since 2.2.3
     */
    protected static $request_type = '';
    /**
     * Constructor
     *
     * @since 2.2.3
     */
    public function __construct(\WP_REST_Server $wp_rest_server)
    {
    }
    /**
     * A wrapper for `apply_filters` which checks for box/field properties to hook to the filter.
     *
     * Checks if a CMB object callback property exists, and if it does,
     * hook it to the permissions filter.
     *
     * @since  2.2.3
     *
     * @param  string $filter         The name of the filter to apply.
     * @param  bool   $default_access The default access for this request.
     *
     * @return void
     */
    public function maybe_hook_callback_and_apply_filters($filter, $default_access)
    {
    }
    /**
     * Checks if the CMB2 box has any registered callback parameters for the given filter.
     *
     * The registered handlers will have a property name which matches the filter, except:
     * - The 'cmb2_api' prefix will be removed
     * - A '_cb' suffix will be added (to stay inline with other '*_cb' parameters).
     *
     * @since  2.2.3
     *
     * @param  string $filter      The filter name.
     * @param  bool   $default_val The default filter value.
     *
     * @return bool                The possibly-modified filter value (if the '*_cb' param is non-callable).
     */
    public function maybe_hook_registered_callback($filter, $default_val)
    {
    }
    /**
     * Unhooks any CMB2 box registered callback parameters for the given filter.
     *
     * @since  2.2.3
     *
     * @param  string $filter The filter name.
     *
     * @return void
     */
    public function maybe_unhook_registered_callback($filter)
    {
    }
    /**
     * Prepare a CMB2 object for serialization
     *
     * @since 2.2.3
     *
     * @param  mixed $data
     * @return array $data
     */
    public function prepare_item($data)
    {
    }
    /**
     * Output buffers a callback and returns the results.
     *
     * @since  2.2.3
     *
     * @param  mixed $cb Callable function/method.
     * @return mixed     Results of output buffer after calling function/method.
     */
    public function get_cb_results($cb)
    {
    }
    /**
     * Prepare the CMB2 item for the REST response.
     *
     * @since 2.2.3
     *
     * @param  mixed           $item     WordPress representation of the item.
     * @param  WP_REST_Request $request  Request object.
     * @return WP_REST_Response $response
     */
    public function prepare_item_for_response($data, $request = \null)
    {
    }
    /**
     * Initiates the request property and the rest_box property if box is readable.
     *
     * @since  2.2.3
     *
     * @param  WP_REST_Request $request      Request object.
     * @param  string          $request_type A description of the type of request being made.
     *
     * @return void
     */
    protected function initiate_rest_read_box($request, $request_type)
    {
    }
    /**
     * Initiates the request property and the rest_box property if box is writeable.
     *
     * @since  2.2.3
     *
     * @param  WP_REST_Request $request      Request object.
     * @param  string          $request_type A description of the type of request being made.
     *
     * @return void
     */
    protected function initiate_rest_edit_box($request, $request_type)
    {
    }
    /**
     * Initiates the request property and the rest_box property.
     *
     * @since  2.2.3
     *
     * @param  WP_REST_Request $request      Request object.
     * @param  string          $request_type A description of the type of request being made.
     *
     * @return void
     */
    protected function initiate_rest_box($request, $request_type)
    {
    }
    /**
     * Initiates the request property and sets up the initial static properties.
     *
     * @since  2.2.3
     *
     * @param  WP_REST_Request $request      Request object.
     * @param  string          $request_type A description of the type of request being made.
     *
     * @return void
     */
    public function initiate_request($request, $request_type)
    {
    }
    /**
     * Useful when getting `_embed`-ed items
     *
     * @since  2.2.3
     *
     * @return string  Initial requested type.
     */
    public static function get_intial_request_type()
    {
    }
    /**
     * Useful when getting `_embed`-ed items
     *
     * @since  2.2.3
     *
     * @return string  Initial requested route.
     */
    public static function get_intial_route()
    {
    }
    /**
     * Get CMB2 fields schema, conforming to JSON Schema
     *
     * @since 2.2.3
     *
     * @return array
     */
    public function get_item_schema()
    {
    }
    /**
     * Return an array of contextual links for endpoint/object
     *
     * @link http://v2.wp-api.org/extending/linking/
     * @link http://www.iana.org/assignments/link-relations/link-relations.xhtml
     *
     * @since  2.2.3
     *
     * @param  mixed $object Object to build links from.
     *
     * @return array          Array of links
     */
    protected abstract function prepare_links($object);
    /**
     * Get whitelisted query strings from URL for appending to link URLS.
     *
     * @since  2.2.3
     *
     * @return string URL query stringl
     */
    public function get_query_string()
    {
    }
}
/**
 * CMB2 objects/boxes endpoint for WordPres REST API.
 * Allows access to boxes configuration data.
 *
 * @todo  Add better documentation.
 * @todo  Research proper schema.
 *
 * @since 2.2.3
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_REST_Controller_Boxes extends \CMB2_REST_Controller
{
    /**
     * The base of this controller's route.
     *
     * @var string
     */
    protected $rest_base = 'boxes';
    /**
     * The combined $namespace and $rest_base for these routes.
     *
     * @var string
     */
    protected $namespace_base = '';
    /**
     * Constructor
     *
     * @since 2.2.3
     */
    public function __construct(\WP_REST_Server $wp_rest_server)
    {
    }
    /**
     * Register the routes for the objects of the controller.
     *
     * @since 2.2.3
     */
    public function register_routes()
    {
    }
    /**
     * Check if a given request has access to get boxes.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|boolean
     */
    public function get_items_permissions_check($request)
    {
    }
    /**
     * Get all public CMB2 boxes.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|WP_REST_Response
     */
    public function get_items($request)
    {
    }
    /**
     * Check if a given request has access to a box.
     * By default, no special permissions needed, but filtering return value.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full details about the request.
     * @return WP_Error|boolean
     */
    public function get_item_permissions_check($request)
    {
    }
    /**
     * Check by filter if a given request has access to a box.
     * By default, no special permissions needed, but filtering return value.
     *
     * @since 2.2.3
     *
     * @param  bool $can_access Whether the current request has access to view the box by default.
     * @return WP_Error|boolean
     */
    public function get_item_permissions_check_filter($can_access = \true)
    {
    }
    /**
     * Get one CMB2 box from the collection.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|WP_REST_Response
     */
    public function get_item($request)
    {
    }
    /**
     * Get a CMB2 box prepared for REST
     *
     * @since 2.2.3
     *
     * @return array
     */
    public function get_rest_box()
    {
    }
    /**
     * Return an array of contextual links for box/boxes.
     *
     * @since  2.2.3
     *
     * @param  CMB2_REST $cmb CMB2_REST object to build links from.
     *
     * @return array          Array of links
     */
    protected function prepare_links($cmb)
    {
    }
}
/**
 * CMB2 objects/fields endpoint for WordPres REST API.
 * Allows access to fields registered to a specific box.
 *
 * @todo  Add better documentation.
 * @todo  Research proper schema.
 *
 * @since 2.2.3
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_REST_Controller_Fields extends \CMB2_REST_Controller_Boxes
{
    /**
     * Register the routes for the objects of the controller.
     *
     * @since 2.2.3
     */
    public function register_routes()
    {
    }
    /**
     * Check if a given request has access to get fields.
     * By default, no special permissions needed, but filtering return value.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|boolean
     */
    public function get_items_permissions_check($request)
    {
    }
    /**
     * Get all public CMB2 box fields.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|WP_REST_Response
     */
    public function get_items($request)
    {
    }
    /**
     * Check if a given request has access to a field.
     * By default, no special permissions needed, but filtering return value.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full details about the request.
     * @return WP_Error|boolean
     */
    public function get_item_permissions_check($request)
    {
    }
    /**
     * Check by filter if a given request has access to a field.
     * By default, no special permissions needed, but filtering return value.
     *
     * @since 2.2.3
     *
     * @param  bool $can_access Whether the current request has access to view the field by default.
     * @return WP_Error|boolean
     */
    public function get_item_permissions_check_filter($can_access = \true)
    {
    }
    /**
     * Get one CMB2 field from the collection.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|WP_REST_Response
     */
    public function get_item($request)
    {
    }
    /**
     * Check if a given request has access to update a field value.
     * By default, requires 'edit_others_posts' capability, but filtering return value.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full details about the request.
     * @return WP_Error|boolean
     */
    public function update_item_permissions_check($request)
    {
    }
    /**
     * Update CMB2 field value.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|WP_REST_Response
     */
    public function update_item($request)
    {
    }
    /**
     * Check if a given request has access to delete a field value.
     * By default, requires 'delete_others_posts' capability, but filtering return value.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full details about the request.
     * @return WP_Error|boolean
     */
    public function delete_item_permissions_check($request)
    {
    }
    /**
     * Delete CMB2 field value.
     *
     * @since 2.2.3
     *
     * @param  WP_REST_Request $request Full data about the request.
     * @return WP_Error|WP_REST_Response
     */
    public function delete_item($request)
    {
    }
    /**
     * Modify CMB2 field value.
     *
     * @since 2.2.3
     *
     * @param  string $activity The modification activity (updated or deleted).
     * @return WP_Error|WP_REST_Response
     */
    public function modify_field_value($activity)
    {
    }
    /**
     * Get a response object for a specific field ID.
     *
     * @since 2.2.3
     *
     * @param  string\CMB2_Field Field id or Field object.
     * @return WP_Error|WP_REST_Response
     */
    public function prepare_read_field($field)
    {
    }
    /**
     * Get a specific field response.
     *
     * @since 2.2.3
     *
     * @param  CMB2_Field Field object.
     * @return array      Response array.
     */
    public function prepare_field_response()
    {
    }
    /**
     * Prepare the field data array for JSON.
     *
     * @since  2.2.3
     *
     * @param  CMB2_Field $field field object.
     *
     * @return array             Array of field data.
     */
    protected function prepare_field_data(\CMB2_Field $field)
    {
    }
    /**
     * Gets field supporting data (field id and value).
     *
     * @since  2.7.0
     *
     * @param  CMB2_Field $field      Field object.
     * @param  array      $field_data Array of field data.
     *
     * @return array                  Array of field data.
     */
    public function get_supporting_data($field_data, $field)
    {
    }
    /**
     * Return an array of contextual links for field/fields.
     *
     * @since  2.2.3
     *
     * @param  CMB2_Field $field Field object to build links from.
     *
     * @return array             Array of links
     */
    protected function prepare_links($field)
    {
    }
    /**
     * Checks if the CMB2 box or field has any registered callback parameters for the given filter.
     *
     * The registered handlers will have a property name which matches the filter, except:
     * - The 'cmb2_api' prefix will be removed
     * - A '_cb' suffix will be added (to stay inline with other '*_cb' parameters).
     *
     * @since  2.2.3
     *
     * @param  string $filter      The filter name.
     * @param  bool   $default_val The default filter value.
     *
     * @return bool                The possibly-modified filter value (if the _cb param is a non-callable).
     */
    public function maybe_hook_registered_callback($filter, $default_val)
    {
    }
    /**
     * Unhooks any CMB2 box or field registered callback parameters for the given filter.
     *
     * @since  2.2.3
     *
     * @param  string $filter The filter name.
     *
     * @return void
     */
    public function maybe_unhook_registered_callback($filter)
    {
    }
}
/**
 * CMB base field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @method string _id
 * @method string _name
 * @method string _desc
 * @method string _text
 * @method string concat_attrs
 */
abstract class CMB2_Type_Base
{
    /**
     * The CMB2_Types object
     *
     * @var CMB2_Types
     */
    public $types;
    /**
     * Arguments for use in the render method
     *
     * @var array
     */
    public $args;
    /**
     * Rendered output (if 'rendered' argument is set to false)
     *
     * @var string
     */
    protected $rendered = '';
    /**
     * Constructor
     *
     * @since 2.2.2
     * @param CMB2_Types $types Object for the field type.
     * @param array      $args  Array of arguments for the type.
     */
    public function __construct(\CMB2_Types $types, $args = array())
    {
    }
    /**
     * Handles rendering this field type.
     *
     * @since  2.2.2
     * @return string  Rendered field type.
     */
    public abstract function render();
    /**
     * Stores the rendered field output.
     *
     * @since  2.2.2
     * @param  string|CMB2_Type_Base $rendered Rendered output.
     * @return string|CMB2_Type_Base           Rendered output or this object.
     */
    public function rendered($rendered)
    {
    }
    /**
     * Returns the stored rendered field output.
     *
     * @since  2.2.2
     * @return string Stored rendered output (if 'rendered' argument is set to false).
     */
    public function get_rendered()
    {
    }
    /**
     * Handles parsing and filtering attributes while preserving any passed in via field config.
     *
     * @since  1.1.0
     * @param  string $element        Element for filter.
     * @param  array  $type_defaults  Type default arguments.
     * @param  array  $type_overrides Type override arguments.
     * @return array                  Parsed and filtered arguments.
     */
    public function parse_args($element, $type_defaults, $type_overrides = array())
    {
    }
    /**
     * Handles parsing and filtering attributes while preserving any passed in via field config.
     *
     * @since  2.2.4
     * @param  array $type_overrides Type override arguments.
     * @return array                 Parsed arguments
     */
    protected function parse_args_from_overrides($type_overrides = array())
    {
    }
    /**
     * Fall back to CMB2_Types methods
     *
     * @param  string $method    Method name being invoked.
     * @param  array  $arguments Arguments passed for the method.
     * @throws Exception Throws an exception if the field is invalid.
     * @return mixed
     */
    public function __call($method, $arguments)
    {
    }
    /**
     * Magic getter for our object.
     *
     * @param string $field Property being requested.
     * @throws Exception Throws an exception if the field is invalid.
     * @return mixed
     */
    public function __get($field)
    {
    }
}
/**
 * CMB base field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
abstract class CMB2_Type_Counter_Base extends \CMB2_Type_Base
{
    /**
     * Whether this type has the counter added.
     *
     * @since  2.7.0
     *
     * @var boolean
     */
    public $has_counter = \false;
    /**
     * Return character counter markup for this field.
     *
     * @since  2.7.0
     *
     * @param  string $val The actual value of this field.
     *
     * @return string
     */
    public function char_counter_markup($val)
    {
    }
    /**
     * Maybe update attributes for the character counter.
     *
     * @since  2.7.0
     *
     * @param  array  $attributes Array of parsed attributes.
     *
     * @return array              Potentially modified attributes.
     */
    public function maybe_update_attributes_for_char_counter($attributes)
    {
    }
    /**
     * Enforce max chars?
     *
     * @since  2.7.0
     *
     * @return bool Whether to enforce max characters.
     */
    public function enforce_max()
    {
    }
}
/**
 * CMB text field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Text extends \CMB2_Type_Counter_Base
{
    /**
     * The type of field
     *
     * @var string
     */
    public $type = 'input';
    /**
     * Constructor
     *
     * @since 2.2.2
     *
     * @param CMB2_Types $types
     * @param array      $args
     */
    public function __construct(\CMB2_Types $types, $args = array(), $type = '')
    {
    }
    /**
     * Handles outputting an 'input' element
     *
     * @since  1.1.0
     * @param  array $args Override arguments
     * @return string       Form input element
     */
    public function render($args = array())
    {
    }
}
/**
 * CMB checkbox field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Checkbox extends \CMB2_Type_Text
{
    /**
     * If checkbox is checked
     *
     * @var mixed
     */
    public $is_checked = \null;
    /**
     * Constructor
     *
     * @since 2.2.2
     *
     * @param CMB2_Types $types      Object for the field type.
     * @param array      $args       Array of arguments for the type.
     * @param mixed      $is_checked Whether or not the field is checked, or default value.
     */
    public function __construct(\CMB2_Types $types, $args = array(), $is_checked = \null)
    {
    }
    /**
     * Render the field for the field type.
     *
     * @since 2.2.2
     *
     * @param array $args Array of arguments for the rendering.
     * @return CMB2_Type_Base|string
     */
    public function render($args = array())
    {
    }
}
/**
 * CMB colorpicker field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Colorpicker extends \CMB2_Type_Text
{
    /**
     * The optional value for the colorpicker field
     *
     * @var string
     */
    public $value = '';
    /**
     * Constructor
     *
     * @since 2.2.2
     *
     * @param CMB2_Types $types Object for the field type.
     * @param array      $args  Array of arguments for the type.
     * @param string     $value Value that the field type is currently set to, or default value.
     */
    public function __construct(\CMB2_Types $types, $args = array(), $value = '')
    {
    }
    /**
     * Render the field for the field type.
     *
     * @since 2.2.2
     *
     * @param array $args Array of arguments for the rendering.
     *
     * @return CMB2_Type_Base|string
     */
    public function render($args = array())
    {
    }
    /**
     * Sanitizes the given color, or array of colors.
     *
     * @since 2.9.0
     *
     * @param string|array $color The color or array of colors to sanitize.
     *
     * @return string|array The color or array of colors, sanitized.
     */
    public static function sanitize_color($color)
    {
    }
    /**
     * Provide the option to use a rgba colorpicker.
     *
     * @since 2.2.6.2
     */
    public static function dequeue_rgba_colorpicker_script()
    {
    }
}
/**
 * CMB File base field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_File_Base extends \CMB2_Type_Text
{
    /**
     * Determines if a file has a valid image extension
     *
     * @since  1.0.0
     * @param  string $file File url
     * @return bool         Whether file has a valid image extension
     */
    public function is_valid_img_ext($file, $blah = \false)
    {
    }
    /**
     * file/file_list image wrap
     *
     * @since  2.0.2
     * @param  array $args Array of arguments for output
     * @return string       Image wrap output
     */
    public function img_status_output($args)
    {
    }
    /**
     * file/file_list file wrap
     *
     * @since  2.0.2
     * @param  array $args Array of arguments for output
     * @return string       File wrap output
     */
    public function file_status_output($args)
    {
    }
    /**
     * Outputs the file/file_list underscore Javascript templates in the footer.
     *
     * @since  2.2.4
     * @return void
     */
    public static function output_js_underscore_templates()
    {
    }
    /**
     * Utility method to return an array of meta data for a registered image size
     *
     * Uses CMB2_Utils::get_named_size() to get the closest available named size
     * from an array of width and height values and CMB2_Utils::get_available_image_sizes()
     * to get the meta data associated with a named size.
     *
     * @since  2.2.4
     * @param  array|string $img_size  Image size. Accepts an array of width and height (in that order)
     * @param  string       $fallback  Size to use if the supplied named size doesn't exist
     * @return array                   Array containing the image size meta data
     *    $size = (
     *      'width'  => (int) image size width
     *      'height' => (int) image size height
     *      'name'   => (string) e.g. 'thumbnail'
     *    )
     */
    static function get_image_size_data($img_size = '', $fallback = 'thumbnail')
    {
    }
    /**
     * Filters attachment data prepared for JavaScript.
     *
     * Adds the url, width, height, and orientation for custom sizes to the JavaScript
     * object returned by the wp.media uploader. Hooked to 'wp_prepare_attachment_for_js'.
     *
     * @since  2.2.4
     * @param  array      $response   Array of prepared attachment data
     * @param  int|object $attachment Attachment ID or object
     * @param  array      $meta       Array of attachment meta data ( from wp_get_attachment_metadata() )
     * @return array      filtered $response array
     */
    public static function prepare_image_sizes_for_js($response, $attachment, $meta)
    {
    }
}
/**
 * CMB file field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_File extends \CMB2_Type_File_Base
{
    /**
     * Handles outputting an 'file' field
     *
     * @param  array $args Override arguments.
     * @return string      Form input element
     */
    public function render($args = array())
    {
    }
    /**
     * Return attempted file preview output for a provided file.
     *
     * @since 2.2.5
     *
     * @return string
     */
    public function get_file_preview_output()
    {
    }
    /**
     * Return field ID output as a hidden field.
     *
     * @since 2.2.5
     *
     * @return string
     */
    public function get_id_field_output()
    {
    }
    /**
     * Return field ID data.
     *
     * @since 2.2.5
     *
     * @return mixed
     */
    public function get_id_field()
    {
    }
}
/**
 * CMB file_list field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_File_List extends \CMB2_Type_File_Base
{
    public function render($args = array())
    {
    }
}
/**
 * CMB Multi base field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
abstract class CMB2_Type_Multi_Base extends \CMB2_Type_Base
{
    /**
     * Generates html for an option element
     *
     * @since  1.1.0
     * @param  array $args Arguments array containing value, label, and checked boolean
     * @return string       Generated option element html
     */
    public function select_option($args = array())
    {
    }
    /**
     * Generates html for list item with input
     *
     * @since  1.1.0
     * @param  array $args Override arguments
     * @param  int   $i    Iterator value
     * @return string       Gnerated list item html
     */
    public function list_input($args = array(), $i = 1)
    {
    }
    /**
     * Generates html for list item with checkbox input
     *
     * @since  1.1.0
     * @param  array $args Override arguments
     * @param  int   $i    Iterator value
     * @return string       Gnerated list item html
     */
    public function list_input_checkbox($args, $i)
    {
    }
    /**
     * Generates html for concatenated items
     *
     * @since  1.1.0
     * @param  array $args Optional arguments
     * @return string        Concatenated html items
     */
    public function concat_items($args = array())
    {
    }
}
/**
 * CMB radio field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Radio extends \CMB2_Type_Multi_Base
{
    /**
     * The type of radio field
     *
     * @var string
     */
    public $type = 'radio';
    /**
     * Constructor
     *
     * @since 2.2.2
     *
     * @param CMB2_Types $types
     * @param array      $args
     */
    public function __construct(\CMB2_Types $types, $args = array(), $type = '')
    {
    }
    public function render()
    {
    }
    protected function ul($a)
    {
    }
}
/**
 * CMB multicheck field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Multicheck extends \CMB2_Type_Radio
{
    /**
     * The type of radio field
     *
     * @var string
     */
    public $type = 'checkbox';
    public function render($args = array())
    {
    }
}
/**
 * CMB oembed field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Oembed extends \CMB2_Type_Text
{
    public function render($args = array())
    {
    }
}
/**
 * CMB Picker base field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
abstract class CMB2_Type_Picker_Base extends \CMB2_Type_Text
{
    /**
     * Parse the picker attributes.
     *
     * @since  2.2.0
     * @param  string $arg  'date' or 'time'
     * @param  array  $args Optional arguments to modify (else use $this->field->args['attributes'])
     * @return array         Array of field attributes
     */
    public function parse_picker_options($arg = 'date', $args = array())
    {
    }
}
/**
 * CMB select field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Select extends \CMB2_Type_Multi_Base
{
    public function render()
    {
    }
}
/**
 * CMB select_timezone field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Select_Timezone extends \CMB2_Type_Select
{
    public function render()
    {
    }
}
/**
 * CMB Taxonomy base field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
abstract class CMB2_Type_Taxonomy_Base extends \CMB2_Type_Multi_Base
{
    /**
     * Parent term ID when looping hierarchical terms.
     *
     * @var integer|null
     */
    protected $parent = \null;
    /**
     * Is this option checked because it matches the value.
     *
     * @param string|int|array $value - Term id or legacy slug.
     * @param WP_Term|stdClass $term - Representation of a term object.
     *
     * @return bool
     */
    public function is_checked($value, $term)
    {
    }
    /**
     * Checks if we can get a post object, and if so, uses `get_the_terms` which utilizes caching.
     *
     * @since  1.0.2
     * @return mixed Array of terms on success
     */
    public function get_object_terms()
    {
    }
    /**
     * Gets the term objects for the terms stored via options boxes.
     *
     * @since  2.2.4
     * @return array Array of terms on success
     */
    public function options_terms()
    {
    }
    /**
     * For non-post objects, wraps the call to wp_get_object_terms with transient caching.
     *
     * @since  2.2.4
     * @return mixed Array of terms on success
     */
    public function non_post_object_terms()
    {
    }
    /**
     * Wrapper for `get_terms` to account for changes in WP 4.6 where taxonomy is expected
     * as part of the arguments.
     *
     * @since  2.2.2
     * @return mixed Array of terms on success
     */
    public function get_terms()
    {
    }
    protected function no_terms_result($error, $tag = 'li')
    {
    }
    public function get_object_term_or_default()
    {
    }
    /**
     * Takes a list of all tax terms and outputs.
     *
     * @since  2.2.5
     *
     * @param  array  $all_terms   Array of all terms.
     * @param  array|string $saved Array of terms set to the object, or single term id.
     *
     * @return string              List of terms.
     */
    protected function loop_terms($all_terms, $saved_terms)
    {
    }
    /**
     * Build children hierarchy.
     *
     * @param  object       $parent_term The parent term object.
     * @param  array|string $saved       Array of terms set to the object, or single term id.
     *
     * @return string                    List of terms.
     */
    protected function build_children($parent_term, $saved)
    {
    }
    /**
     * Build child terms output.
     *
     * @since  2.6.1
     *
     * @param  array        $terms Array of child terms.
     * @param  array|string $saved Array of terms set to the object, or single term id.
     *
     * @return string              Child option output.
     */
    public function child_option_output($terms, $saved)
    {
    }
}
/**
 * CMB taxonomy_multicheck field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Taxonomy_Multicheck extends \CMB2_Type_Taxonomy_Base
{
    protected $counter = 0;
    public function render()
    {
    }
    protected function get_term_options()
    {
    }
    protected function loop_terms($all_terms, $saved_terms)
    {
    }
    protected function list_term_input($term, $saved_terms)
    {
    }
    public function get_object_term_or_default()
    {
    }
    protected function get_wrapper_classes()
    {
    }
}
/**
 * CMB taxonomy_multicheck_hierarchical field type
 *
 * @since  2.2.5
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Taxonomy_Multicheck_Hierarchical extends \CMB2_Type_Taxonomy_Multicheck
{
    /**
     * Parent term ID when looping hierarchical terms.
     *
     * @var integer
     */
    protected $parent = 0;
    public function render()
    {
    }
    protected function list_term_input($term, $saved_terms)
    {
    }
}
/**
 * CMB taxonomy_radio field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Taxonomy_Radio extends \CMB2_Type_Taxonomy_Base
{
    protected $counter = 0;
    public function render()
    {
    }
    protected function get_term_options()
    {
    }
    protected function loop_terms($all_terms, $saved_term)
    {
    }
    protected function list_term_input($term, $saved_term)
    {
    }
}
/**
 * CMB taxonomy_radio_hierarchical field type
 *
 * @since  2.2.5
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Taxonomy_Radio_Hierarchical extends \CMB2_Type_Taxonomy_Radio
{
    /**
     * Parent term ID when looping hierarchical terms.
     *
     * @var integer
     */
    protected $parent = 0;
    public function render()
    {
    }
    protected function list_term_input($term, $saved_term)
    {
    }
}
/**
 * CMB taxonomy_select field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Taxonomy_Select extends \CMB2_Type_Taxonomy_Base
{
    /**
     * Current Term Object.
     *
     * @since 2.6.1
     *
     * @var   null|WP_Term
     */
    public $current_term = \null;
    /**
     * Saved Term Object.
     *
     * @since 2.6.1
     *
     * @var   null|WP_Term
     */
    public $saved_term = \null;
    public function render()
    {
    }
    protected function get_term_options()
    {
    }
    protected function loop_terms($all_terms, $saved_term)
    {
    }
}
/**
 * CMB taxonomy_select_hierarchical field type
 *
 * @since  2.6.1
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Taxonomy_Select_Hierarchical extends \CMB2_Type_Taxonomy_Select
{
    /**
     * Parent term ID when looping hierarchical terms.
     *
     * @since  2.6.1
     *
     * @var integer
     */
    protected $parent = 0;
    /**
     * Child loop depth.
     *
     * @since  2.6.1
     *
     * @var integer
     */
    protected $level = 0;
    public function render()
    {
    }
    public function select_option($args = array())
    {
    }
    /**
     * Build children hierarchy.
     *
     * @since  2.6.1
     *
     * @param  array        $terms Array of child terms.
     * @param  array|string $saved Array of terms set to the object, or single term slug.
     *
     * @return string              Child option output.
     */
    public function child_option_output($terms, $saved)
    {
    }
}
/**
 * CMB textarea field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Textarea extends \CMB2_Type_Counter_Base
{
    /**
     * Handles outputting an 'textarea' element
     *
     * @since  1.1.0
     * @param  array $args Override arguments
     * @return string       Form textarea element
     */
    public function render($args = array())
    {
    }
}
/**
 * CMB textarea_code field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Textarea_Code extends \CMB2_Type_Textarea
{
    /**
     * Handles outputting an 'textarea' element
     *
     * @since  1.1.0
     * @param  array $args Override arguments
     * @return string       Form textarea element
     */
    public function render($args = array())
    {
    }
}
/**
 * CMB text_date field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Text_Date extends \CMB2_Type_Picker_Base
{
    public function render($args = array())
    {
    }
}
/**
 * CMB text_datetime_timestamp field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Text_Datetime_Timestamp extends \CMB2_Type_Picker_Base
{
    public function render($args = array())
    {
    }
    public function date_args($args, $has_good_value)
    {
    }
    public function time_args($args, $has_good_value)
    {
    }
}
/**
 * CMB text_datetime_timestamp_timezone field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Text_Datetime_Timestamp_Timezone extends \CMB2_Type_Base
{
    public function render($args = array())
    {
    }
}
/**
 * CMB text_time field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Text_Time extends \CMB2_Type_Text_Date
{
    public function render($args = array())
    {
    }
}
/**
 * CMB title field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
class CMB2_Type_Title extends \CMB2_Type_Base
{
    /**
     * Handles outputting an 'title' element
     *
     * @return string Heading element
     */
    public function render()
    {
    }
}
/**
 * CMB wysiwyg field type
 *
 * @since  2.2.2
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 *
 * @method string _id()
 * @method string _desc()
 */
class CMB2_Type_Wysiwyg extends \CMB2_Type_Textarea
{
    /**
     * Handles outputting a 'wysiwyg' element
     * @since  1.1.0
     * @return string Form wysiwyg element
     */
    public function render($args = array())
    {
    }
    protected function sanitize_id($id)
    {
    }
    protected function get_wp_editor($args)
    {
    }
    public function add_wysiwyg_template_for_group()
    {
    }
}
/**
 * CMB2 Helper Functions
 *
 * @category  WordPress_Plugin
 * @package   CMB2
 * @author    CMB2 team
 * @license   GPL-2.0+
 * @link      https://cmb2.io
 */
/**
 * Helper function to provide directory path to CMB2
 *
 * @since  2.0.0
 * @param  string $path Path to append.
 * @return string        Directory with optional path appended
 */
function cmb2_dir($path = '')
{
}
/**
 * Autoloads files with CMB2 classes when needed
 *
 * @since  1.0.0
 * @param  string $class_name Name of the class being requested.
 */
function cmb2_autoload_classes($class_name)
{
}
/**
 * Get instance of the CMB2_Utils class
 *
 * @since  2.0.0
 * @return CMB2_Utils object CMB2 utilities class
 */
function cmb2_utils()
{
}
/**
 * Get instance of the CMB2_Ajax class
 *
 * @since  2.0.0
 * @return CMB2_Ajax object CMB2 ajax class
 */
function cmb2_ajax()
{
}
/**
 * Get instance of the CMB2_Option class for the passed metabox ID
 *
 * @since  2.0.0
 *
 * @param string $key Option key to fetch.
 * @return CMB2_Option object Options class for setting/getting options for metabox
 */
function cmb2_options($key)
{
}
/**
 * Get a cmb oEmbed. Handles oEmbed getting for non-post objects
 *
 * @since  2.0.0
 * @param  array $args Arguments. Accepts:
 *
 *       'url'         - URL to retrieve the oEmbed from,
 *       'object_id'   - $post_id,
 *       'object_type' - 'post',
 *       'oembed_args' - $embed_args, // array containing 'width', etc
 *       'field_id'    - false,
 *       'cache_key'   - false,
 *       'wp_error'    - true/false, // To return a wp_error object if no embed found.
 *
 * @return string        oEmbed string
 */
function cmb2_get_oembed($args = array())
{
}
/**
 * Outputs the return of cmb2_get_oembed.
 *
 * @since  2.2.2
 * @see cmb2_get_oembed
 *
 * @param array $args oEmbed args.
 */
function cmb2_do_oembed($args = array())
{
}
/**
 * A helper function to get an option from a CMB2 options array
 *
 * @since  1.0.1
 * @param  string $option_key Option key.
 * @param  string $field_id   Option array field key.
 * @param  mixed  $default    Optional default fallback value.
 * @return mixed               Options array or specific field
 */
function cmb2_get_option($option_key, $field_id = '', $default = \false)
{
}
/**
 * A helper function to update an option in a CMB2 options array
 *
 * @since  2.0.0
 * @param  string  $option_key Option key.
 * @param  string  $field_id   Option array field key.
 * @param  mixed   $value      Value to update data with.
 * @param  boolean $single     Whether data should not be an array.
 * @return boolean             Success/Failure
 */
function cmb2_update_option($option_key, $field_id, $value, $single = \true)
{
}
/**
 * Get a CMB2 field object.
 *
 * @param array|string $meta_box    Metabox ID or Metabox config array.
 * @param array|string $field_id    Field ID or all field arguments.
 * @param int|string   $object_id   Object ID.
 * @param string       $object_type Type of object being saved. (e.g., post, user, comment, or options-page).
 *                                  Defaults to metabox object type.
 *
 * @since  1.1.0
 * @return CMB2_Field|null     CMB2_Field object unless metabox config cannot be found
 */
function cmb2_get_field($meta_box, $field_id, $object_id = 0, $object_type = '')
{
}
/**
 * Get a field's value.
 *
 * @since  1.1.0
 * @param  array      $meta_box    Metabox ID or Metabox config array.
 * @param  array      $field_id    Field ID or all field arguments.
 * @param  int|string $object_id   Object ID (string for options-page).
 * @param  string     $object_type Type of object being saved. (e.g., post, user, term, comment, or options-page).
 *                             Defaults to metabox object type.
 * @return mixed               Maybe escaped value
 */
function cmb2_get_field_value($meta_box, $field_id, $object_id = 0, $object_type = '')
{
}
/**
 * Because OOP can be scary
 *
 * @since  2.0.2
 * @param  array $meta_box_config Metabox Config array.
 * @return CMB2 object            Instantiated CMB2 object
 */
function new_cmb2_box(array $meta_box_config)
{
}
/**
 * Retrieve a CMB2 instance by the metabox ID
 *
 * @since  2.0.0
 * @param  mixed      $meta_box    Metabox ID or Metabox config array.
 * @param  int|string $object_id   Object ID (string for options-page).
 * @param  string     $object_type Type of object being saved.
 *                                 (e.g., post, user, term, comment, or options-page).
 *                                 Defaults to metabox object type.
 * @return CMB2 object
 */
function cmb2_get_metabox($meta_box, $object_id = 0, $object_type = '')
{
}
/**
 * Returns array of sanitized field values from a metabox (without saving them)
 *
 * @since  2.0.3
 * @param  mixed $meta_box         Metabox ID or Metabox config array.
 * @param  array $data_to_sanitize Array of field_id => value data for sanitizing (likely $_POST data).
 * @return mixed                   Array of sanitized values or false if no CMB2 object found
 */
function cmb2_get_metabox_sanitized_values($meta_box, array $data_to_sanitize)
{
}
/**
 * Retrieve a metabox form
 *
 * @since  2.0.0
 * @param  mixed      $meta_box  Metabox config array or Metabox ID.
 * @param  int|string $object_id Object ID (string for options-page).
 * @param  array $args           Optional arguments array.
 * @return string             CMB2 html form markup
 */
function cmb2_get_metabox_form($meta_box, $object_id = 0, $args = array())
{
}
/**
 * Display a metabox form & save it on submission
 *
 * @since  1.0.0
 * @param  mixed      $meta_box  Metabox config array or Metabox ID.
 * @param  int|string $object_id Object ID (string for options-page).
 * @param  array $args           Optional arguments array.
 */
function cmb2_print_metabox_form($meta_box, $object_id = 0, $args = array())
{
}
/**
 * Display a metabox form (or optionally return it) & save it on submission.
 *
 * @since  1.0.0
 * @param  mixed      $meta_box  Metabox config array or Metabox ID.
 * @param  int|string $object_id Object ID (string for options-page).
 * @param  array      $args      Optional arguments array.
 * @return string
 */
function cmb2_metabox_form($meta_box, $object_id = 0, $args = array())
{
}